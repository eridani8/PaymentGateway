@using PaymentGateway.Shared.DTOs.User
@using PaymentGateway.Shared.Interfaces
@using PaymentGateway.Shared.Validations.Validators.User
@inject ISnackbar Snackbar
@inject IAdminService AdminService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Создание нового пользователя</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="@_createUserDto" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <MudTextField T="string"
                          Label="Логин"
                          FullWidth="true"
                          @bind-Value="_createUserDto.Username"
                          For="@(() => _createUserDto.Username)"
                          Immediate="true"
                          Margin="Margin.Normal"/>

            <MudTextField T="string"
                          Label="Пароль"
                          FullWidth="true"
                          @bind-Value="_createUserDto.Password"
                          InputType="InputType.Password"
                          For="@(() => _createUserDto.Password)"
                          Immediate="true"
                          Margin="Margin.Normal"/>

            <MudGrid>
                <MudItem xs="6">
                    <MudNumericField T="int"
                                     Label="Максимальное количество реквизитов"
                                     @bind-Value="_createUserDto.MaxRequisitesCount"
                                     Min="0"
                                     For="@(() => _createUserDto.MaxRequisitesCount)"
                                     Immediate="true"
                                     Margin="Margin.Normal"/>
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField T="decimal"
                                     Label="Максимальная суточная сумма"
                                     @bind-Value="_createUserDto.MaxDailyMoneyReceptionLimit"
                                     For="@(() => _createUserDto.MaxDailyMoneyReceptionLimit)"
                                     Format="N0"
                                     Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                     Min="0"
                                     Step="1000"
                                     Immediate="true"
                                     Margin="Margin.Normal"/>
                </MudItem>
            </MudGrid>

            <MudText Typo="Typo.subtitle1" Class="mt-2 mb-1">Роль</MudText>
            <MudToggleGroup T="string" SelectionMode="SelectionMode.ToggleSelection" Color="Color.Primary" @bind-Value="SelectedRole">
                @foreach (var role in _availableRoles)
                {
                    <MudToggleItem Value="@role">@GetRoleDisplayName(role)</MudToggleItem>
                }
            </MudToggleGroup>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3 mb-3">@_errorMessage</MudAlert>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="@(Cancel)">Отмена</MudButton>
        <MudButton Color="Color.Secondary" OnClick="@(Submit)" Disabled="@(_processing)">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Обработка</MudText>
            }
            else
            {
                <MudText>Создать</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public required IMudDialogInstance MudDialog { get; set; }

    private MudForm _form = null!;
    private readonly CreateUserDto _createUserDto = new();
    private string? _errorMessage;
    private bool _processing;
    private readonly string[] _availableRoles = ["User", "Admin", "Support"];

    private string SelectedRole
    {
        get => _createUserDto.Roles.FirstOrDefault() ?? "User";
        set => _createUserDto.Roles = [value];
    }

    private readonly CreateUserValidator _validator = new();

    protected override void OnInitialized()
    {
        _createUserDto.Roles = ["User"];
        _createUserDto.IsActive = true;
        _createUserDto.MaxRequisitesCount = 10;
        _createUserDto.MaxDailyMoneyReceptionLimit = 50000;
    }

    private static string GetRoleDisplayName(string role) => role switch
    {
        "User" => "Пользователь",
        "Admin" => "Администратор",
        "Support" => "Поддержка",
        _ => role
    };

    private async Task Submit()
    {
        _errorMessage = null;

        await _form.Validate();

        if (_form.IsValid)
        {
            _processing = true;

            try
            {
                var result = await AdminService.CreateUser(_createUserDto);

                if (result != null)
                {
                    Snackbar.Add($"Пользователь {result.Username} успешно создан", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(result));
                }
                else
                {
                    _errorMessage = "Ошибка при создании пользователя";
                }
            }
            catch (Exception e)
            {
                _errorMessage = e.Message;
            }
            finally
            {
                _processing = false;
            }
        }
    }

    public void Cancel()
    {
        MudDialog.Cancel();
    }

}