@using System.Net
@using PaymentGateway.Shared.DTOs.Device
@using PaymentGateway.Shared.DTOs.Requisite
@using PaymentGateway.Shared.Enums
@using PaymentGateway.Shared.Validations.Validators.Requisite
@inject ISnackbar Snackbar
@inject IRequisiteService RequisiteService
@inject IDeviceService DeviceService
@inject ILogger<CreateRequisiteDialog> Logger

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Создание нового реквизита</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="@_createRequisiteDto" Validation="@(_validator.ValidateValue)" ValidationDelay="0">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="ФИО"
                                  FullWidth="true"
                                  @bind-Value="_createRequisiteDto.FullName"
                                  For="@(() => _createRequisiteDto.FullName)"
                                  Immediate="true"
                                  Margin="Margin.Normal"/>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.subtitle2" Class="mb-1">Тип платежа</MudText>
                        <MudToggleGroup T="PaymentType" SelectionMode="SelectionMode.ToggleSelection"
                                        @bind-Value="_createRequisiteDto.PaymentType"
                                        Color="Color.Primary"
                                        Class="ml-2">
                            <MudToggleItem Value="PaymentType.PhoneNumber">Телефон</MudToggleItem>
                            <MudToggleItem Value="PaymentType.BankCard">Карта
                            </MudToggleItem>
                        </MudToggleGroup>
                    </MudStack>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="@(_createRequisiteDto.PaymentType == PaymentType.PhoneNumber ? "Номер телефона" : "Номер карты")"
                                  FullWidth="true"
                                  @bind-Value="_createRequisiteDto.PaymentData"
                                  For="@(() => _createRequisiteDto.PaymentData)"
                                  Immediate="true"
                                  Margin="Margin.Normal"/>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField T="string"
                                  Label="Номер банковского счета"
                                  FullWidth="true"
                                  @bind-Value="_createRequisiteDto.BankNumber"
                                  For="@(() => _createRequisiteDto.BankNumber)"
                                  Immediate="true"
                                  Margin="Margin.Normal"/>
                </MudItem>

                <AuthorizeView Roles="Admin, Support">
                    <Authorized>
                        <MudItem xs="12" sm="4">
                            <MudNumericField T="decimal"
                                             Label="Суточная сумма"
                                             @bind-Value="_createRequisiteDto.MaxAmount"
                                             For="@(() => _createRequisiteDto.MaxAmount)"
                                             Format="N0"
                                             Adornment="Adornment.Start"
                                             AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                             Min="0"
                                             Step="1000"
                                             Immediate="true"
                                             Margin="Margin.Normal"/>
                        </MudItem>

                        <MudItem xs="12" sm="4">
                            <MudNumericField T="decimal"
                                             Label="Месячный лимит"
                                             @bind-Value="_createRequisiteDto.MonthLimit"
                                             For="@(() => _createRequisiteDto.MonthLimit)"
                                             Format="N0"
                                             Adornment="Adornment.Start"
                                             AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                             Min="0"
                                             Step="10000"
                                             Immediate="true"
                                             Margin="Margin.Normal"/>
                        </MudItem>

                        <MudItem xs="12" sm="2">
                            <MudNumericField T="int"
                                             Label="Приоритет"
                                             @bind-Value="_createRequisiteDto.Priority"
                                             For="@(() => _createRequisiteDto.Priority)"
                                             Min="1"
                                             Max="100"
                                             Immediate="true"
                                             Margin="Margin.Normal"/>
                        </MudItem>

                        <MudItem xs="12" sm="2">
                            <MudTextField T="TimeSpan"
                                          Label="Задержка"
                                          @bind-Value="_createRequisiteDto.Cooldown"
                                          For="@(() => _createRequisiteDto.Cooldown)"
                                          Immediate="true"
                                          Margin="Margin.Normal"/>
                        </MudItem>
                    </Authorized>
                </AuthorizeView>

                <MudItem xs="12" sm="2">
                    <MudSwitch T="bool"
                               @bind-Value="_createRequisiteDto.IsActive"
                               Color="Color.Primary"
                               Label="Активный"
                               Class="mt-4"/>
                </MudItem>

                <MudItem xs="12" sm="2">
                    <MudSwitch T="bool"
                               @bind-Value="_useWorkingHours"
                               Color="Color.Primary"
                               Label="Рабочее время"
                               Class="mt-4"/>
                </MudItem>

                <MudItem xs="12" sm="2">
                    <MudTimePicker Label="С"
                                   Variant="Variant.Outlined"
                                   @bind-Time="_workFromTime"
                                   TimeEditMode="TimeEditMode.Normal"
                                   Margin="Margin.Normal"
                                   Disabled="@(!_useWorkingHours)"/>
                </MudItem>
                <MudItem xs="12" sm="2">
                    <MudTimePicker Label="До"
                                   Variant="Variant.Outlined"
                                   @bind-Time="_workToTime"
                                   TimeEditMode="TimeEditMode.Normal"
                                   Margin="Margin.Normal"
                                   Disabled="@(!_useWorkingHours)"/>
                </MudItem>

                <MudItem xs="12" sm="4">
                    <MudSelect T="Guid"
                               @bind-Value="@_createRequisiteDto.DeviceId"
                               ToStringFunc="deviceId => _devices.FirstOrDefault(d => d.Id == deviceId)?.DeviceName ?? string.Empty"
                               Modal="true"
                               Variant="Variant.Outlined"
                               Clearable="true"
                               Placeholder="Устройство"
                               Margin="Margin.Normal"
                               Class="mt-4"
                               For="@(() => _createRequisiteDto.DeviceId)"
                               Immediate="true">
                        @foreach (var device in _devices)
                        {
                            <MudSelectItem Value="device.Id">@device.DeviceName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

            </MudGrid>
            
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3 mb-3">@_errorMessage</MudAlert>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="@(Cancel)">Отмена</MudButton>
        <MudButton Color="Color.Secondary" OnClick="@(Submit)" Disabled="@(_processing)">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Обработка</MudText>
            }
            else
            {
                <MudText>Создать</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public required IMudDialogInstance MudDialog { get; set; }

    private MudForm _form = null!;
    private readonly RequisiteCreateDto _createRequisiteDto = new();
    private string? _errorMessage;
    private bool _processing;
    private bool _useWorkingHours;
    private TimeSpan? _workFromTime;
    private TimeSpan? _workToTime;
    private List<DeviceDto> _devices = [];

    private readonly RequisiteCreateDtoValidator _validator = new();

    protected override void OnInitialized()
    {
        _createRequisiteDto.IsActive = true;
        _createRequisiteDto.Priority = 1;
        _createRequisiteDto.MaxAmount = 5000;
        _createRequisiteDto.MonthLimit = 100000;
        _createRequisiteDto.Cooldown = TimeSpan.Parse("03:00:00");
        _useWorkingHours = false;
        _workFromTime = new TimeSpan(9, 0, 0);
        _workToTime = new TimeSpan(18, 0, 0);
    }

    protected override async Task OnInitializedAsync()
    {
        _processing = true;
        try
        {
            _devices = await DeviceService.GetUserOnlineDevices();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка загрузки устройств");
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task Submit()
    {
        _errorMessage = null;

        await _form.Validate();

        if (_form.IsValid)
        {
            _processing = true;

            try
            {
                if (_useWorkingHours && _workFromTime.HasValue && _workToTime.HasValue)
                {
                    _createRequisiteDto.WorkFrom = TimeOnly.FromTimeSpan(_workFromTime.Value);
                    _createRequisiteDto.WorkTo = TimeOnly.FromTimeSpan(_workToTime.Value);
                }
                else
                {
                    _createRequisiteDto.WorkFrom = TimeOnly.MinValue;
                    _createRequisiteDto.WorkTo = TimeOnly.MinValue;
                }

                var result = await RequisiteService.CreateRequisite(_createRequisiteDto);

                if (result.Code == HttpStatusCode.OK)
                {
                    Snackbar.Add($"Реквизит успешно создан", Severity.Success);
                    MudDialog.Close();
                }
                else
                {
                    _errorMessage = result.Content ?? "Ошибка при создании реквизита";
                }
            }
            catch (Exception e)
            {
                _errorMessage = e.Message;
            }
            finally
            {
                _processing = false;
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}