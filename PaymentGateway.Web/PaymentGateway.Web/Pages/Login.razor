@page "/Login"
@using PaymentGateway.Web.Models
@using PaymentGateway.Web.Service
@inject IHttpClientFactory Factory
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger

<h3>Авторизация</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <p class="alert alert-danger">@_errorMessage</p>
}

<EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <Blazorise.ValidationSummary />

    <div class="form-group">
        <label>Имя пользователя:</label>
        <InputText @bind-Value="_loginModel.Username" class="form-control" />
    </div>
    <div class="form-group">
        <label>Пароль:</label>
        <InputText @bind-Value="_loginModel.Password" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Войти</button>
</EditForm>

@code {
    private readonly LoginModel _loginModel = new();
    private string? _errorMessage;

    private async Task HandleLogin()
    {
        _errorMessage = null;
        try
        {
            using var client = Factory.CreateClient("API");
            var response = await client.PostAsJsonAsync("auth/login", _loginModel, cancellationToken: CancellationToken.None);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await AuthStateProvider.MarkUserAsAuthenticated(token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _errorMessage = "Неверное имя пользователя или пароль.";
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка авторизации");
            _errorMessage = "Ошибка при входе";
        }
    }
}