@page "/Settings"
@using System.Net
@using Blazorise.FluentValidation
@using PaymentGateway.Shared.Models
@using PaymentGateway.Web.Interfaces
@attribute [Authorize]
@inject IUserService UserService
@inject INotificationService NotificationService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">

                    <Validations @ref="_validations" Mode="ValidationMode.Auto" Model="@_changePasswordModel"
                                 ValidateOnLoad="false" HandlerType="typeof(FluentValidationHandler)">
                        <Validation>
                            <Field>
                                <TextEdit type="password" @bind-Text="@_changePasswordModel.CurrentPassword"
                                          Placeholder="Текущий пароль">
                                    <Feedback>
                                        <ValidationError/>
                                    </Feedback>
                                </TextEdit>
                            </Field>
                            <Validation>
                                <Field>
                                    <TextEdit type="password" @bind-Text="@_changePasswordModel.NewPassword" Placeholder="Пароль">
                                        <Feedback>
                                            <ValidationError/>
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                            <Validation>
                                <Field>
                                    <TextEdit type="password" @bind-Text="@_changePasswordModel.ConfirmPassword" Placeholder="Подтверждение пароля">
                                        <Feedback>
                                            <ValidationError/>
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                        </Validation>

                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <Alert Color="Color.Danger" Visible>
                                @_errorMessage
                            </Alert>
                        }

                        <Button Color="Color.Primary" Clicked="@ChangePassword" Block>Изменить пароль</Button>
                        
                    </Validations>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ChangePasswordModel _changePasswordModel = new();
    private Validations? _validations;
    private string? _errorMessage;

    private async Task ChangePassword()
    {
        _errorMessage = null;

        if (_validations != null)
        {
            if (await _validations.ValidateAll())
            {
                var (status, content) = await UserService.ChangePasswordAsync(_changePasswordModel);
                if (status == HttpStatusCode.OK)
                {
                    _changePasswordModel = new ChangePasswordModel();
                    await NotificationService.Success("Пароль успешно изменен");
                }
                else
                {
                    await NotificationService.Error("Ошибка при смене пароля");
                }
            }
        }
    }
}