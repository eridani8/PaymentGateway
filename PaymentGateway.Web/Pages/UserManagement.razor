@page "/UserManagement"
@using PaymentGateway.Shared.DTOs.User
@using PaymentGateway.Web.Dialogs
@using System.Timers
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService AdminService
@inject ILogger<UserManagement> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@implements IDisposable

<AuthorizeView Roles="Admin">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4" Style="height: calc(100vh - 97px); padding: 0;">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список пользователей</MudText>
                    <MudSpacer />
                    <MudButton 
                        Variant="Variant.Filled" 
                        Color="Color.Primary" 
                        StartIcon="@Icons.Material.Filled.Add" 
                        OnClick="OpenCreateDialog">
                        Создать пользователя
                    </MudButton>
                </MudToolBar>
                <MudDataGrid T="UserDto" 
                            Items="@_users" 
                            Loading="@_isLoading" 
                            SortMode="SortMode.Multiple" 
                            Filterable="true"
                            Hideable="true"
                            Bordered="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="ID"/>
                        <PropertyColumn Property="x => x.Username" Title="Логин"/>
                        <TemplateColumn Title="Роли">
                            <CellTemplate Context="cellContext">
                                @string.Join(", ", cellContext.Item.Roles)
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Статус">
                            <CellTemplate Context="cellContext">
                                <MudChip Color="@(cellContext.Item.IsActive ? Color.Success : Color.Error)" Size="Size.Small">
                                    @(cellContext.Item.IsActive ? "Активен" : "Неактивен")
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Действия">
                            <CellTemplate Context="cellContext">
                                @if (cellContext.Item.Username != "root")
                                {
                                    <MudIconButton 
                                        Icon="@Icons.Material.Filled.Edit" 
                                        Color="Color.Primary" 
                                        Size="Size.Small"
                                        OnClick="@(() => OpenEditDialog(cellContext.Item))" 
                                        Title="Редактировать"/>
                                        <MudIconButton 
                                    Icon="@Icons.Material.Filled.Delete" 
                                    Color="Color.Error" 
                                    Size="Size.Small"
                                    OnClick="@(() => OpenDeleteDialog(cellContext.Item))" 
                                    aria-label="delete"/>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<UserDto> _users = [];
    private Timer _timer = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();

        _timer = new Timer(3000);
        _timer.Elapsed += async (_, _) => await InvokeAsync(async () =>
        {
            await LoadUsers();
            StateHasChanged();
        });
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private async Task LoadUsers()
    {
        try
        {
            _isLoading = true;
            _users = await AdminService.GetUsers();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке пользователей", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateUserDialog>(null);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadUsers();
        }
    }
    
    private async Task OpenDeleteDialog(UserDto user)
    {
        var parameters = new DialogParameters { ["User"] = user };
        var dialog = await DialogService.ShowAsync<DeleteUserDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadUsers();
        }
    }

    private async Task OpenEditDialog(UserDto user)
    {
        var parameters = new DialogParameters
        {
            ["User"] = user
        };

        var dialog = await DialogService.ShowAsync<EditUserDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            var updateDto = (UpdateUserDto)result.Data;
            try
            {
                await AdminService.UpdateUser(updateDto);
            }
            catch (Exception e)
            {
                Logger.LogError(e, e.Message);
                Snackbar.Add("Ошибка при обновлении пользователя", Severity.Error);
            }
        }
    }
}