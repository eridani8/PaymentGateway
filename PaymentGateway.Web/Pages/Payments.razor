@page "/payments"
@attribute [Authorize(Roles = "User,Admin,Support")]
@using PaymentGateway.Shared.DTOs.Payment
@using PaymentGateway.Shared.Enums
@using System.Net
@inject IPaymentService PaymentService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ILogger<Requisites> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@implements IAsyncDisposable
@implements IDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список платежей</MudText>
                    <MudSpacer/>
                    <AuthorizeView Roles="Admin, Support">
                        <Authorized Context="adminContext">
                            <MudStack Row="true" Spacing="1">
                                <MudTextField @bind-Value="_searchUserId" Label="ID пользователя"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@Icons.Material.Filled.Search"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Normal"
                                              Placeholder="Фильтр по пользователю"
                                              Error="@(!string.IsNullOrEmpty(_searchError))"
                                              ErrorText="@_searchError"
                                              Style="width: 600px"/>
                                <MudButton Color="Color.Primary"
                                           Variant="Variant.Outlined"
                                           OnClick="@(SearchPaymentsByUserId)"
                                           Style="height: 56px; align-self: flex-start; margin-top: 16px;">Найти
                                </MudButton>
                                @if (_isFiltered)
                                {
                                    <MudButton Color="Color.Secondary"
                                               Variant="Variant.Outlined"
                                               OnClick="@(ClearSearch)"
                                               Style="height: 56px; align-self: flex-start; margin-top: 16px;">Сбросить
                                    </MudButton>
                                }
                            </MudStack>
                        </Authorized>
                    </AuthorizeView>
                </MudToolBar>
                <MudDataGrid T="PaymentDto"
                             Items="_payments"
                             Loading="@_isLoading"
                             LoadingProgressColor="Color.Primary"
                             SortMode="SortMode.Multiple"
                             Filterable="true"
                             Hideable="true"
                             Bordered="true"
                             Hover="true"
                             Dense="true">
                    <Columns>
                        <HierarchyColumn/>
                        <TemplateColumn Title="Владелец реквизита" Hidden="!_isShowAll">
                            <CellTemplate Context="cellContext">
                                @if (!string.IsNullOrEmpty(cellContext.Item?.Requisite?.User?.Username))
                                {
                                    <MudChip Icon="@Icons.Material.Filled.Person"
                                             Color="Color.Primary"
                                             Size="Size.Small"
                                             Text="@cellContext.Item!.Requisite!.User!.Username"/>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Amount" Title="Сумма"/>
                        <TemplateColumn Title="Статус">
                            <CellTemplate Context="cellContext">
                                <MudChip Size="Size.Small" Color="@GetStatusColor(cellContext.Item.Status)">
                                    @GetStatusText(cellContext.Item.Status)
                                    @if (cellContext.Item.Status == PaymentStatus.Pending)
                                    {
                                        @GetRemainingPendingTime(cellContext.Item)
                                    }
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.CreatedAt" Title="Создан"/>
                        <TemplateColumn Title="Обработан">
                            <CellTemplate Context="cellContext">
                                @(cellContext.Item.ProcessedAt is null ? "-" : cellContext.Item.ProcessedAt.ToString())
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Истечение">
                            <CellTemplate Context="cellContext">
                                @(cellContext.Item.ExpiresAt is null ? "-" : cellContext.Item.ExpiresAt.ToString())
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <ChildRowContent Context="rowContext">
                        <MudStack>
                            <MudTooltip Placement="Placement.Left" Text="Id платежа">
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.CreditCard" Class="mr-2"/>
                                    <MudText Typo="Typo.body1">@rowContext.Item.Id</MudText>
                                </MudStack>
                            </MudTooltip>
                            @if (rowContext.Item.Requisite is not null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id реквизита">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.RequestPage" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.Requisite.Id</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                            @if (rowContext.Item.ManualConfirmUserId is not null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id принявшего">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.AssignmentInd" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.ManualConfirmUserId</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                            @if (rowContext.Item.CanceledByUserId is not null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id отменившего">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.AssignmentInd" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.CanceledByUserId</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                            @if (rowContext.Item.TransactionId is not null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id транзакции">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.CommentBank" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.TransactionId</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                            <AuthorizeView Roles="Admin,Support">
                                <Authorized Context="adminPaymentContext">
                                    <MudStack Row="true" Class="pt-2">
                                        @if (rowContext.Item.Status is PaymentStatus.Created or PaymentStatus.Pending)
                                        {
                                            <MudButton OnClick="@(() => PaymentManualConfirm(rowContext.Item))"
                                                       Variant="Variant.Outlined" Color="Color.Warning">Подтвердить
                                                платеж
                                            </MudButton>
                                            <MudButton Color="Color.Error"
                                                       Variant="Variant.Filled"
                                                       OnClick="@(() => CancelPayment(rowContext.Item))">
                                                Отменить платеж
                                            </MudButton>
                                        }
                                    </MudStack>
                                </Authorized>
                            </AuthorizeView>
                        </MudStack>
                    </ChildRowContent>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<PaymentDto> _payments = [];
    private bool _isShowAll;
    private Timer _refreshTimer = null!;
    private const int refreshInterval = 3000;
    private string _searchUserId = string.Empty;
    private string _searchError = string.Empty;
    private bool _isFiltered;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isShowAll = authState.User.IsInRole("Admin") || authState.User.IsInRole("Support");
        
        await LoadPayments();
        
        NotificationService.SubscribeToPaymentUpdates(HandlePaymentUpdate);
        NotificationService.SubscribeToPaymentDeletions(HandlePaymentDeleted);
        
        _refreshTimer = new Timer(TimerTick, null, refreshInterval, refreshInterval);
    }

    private async void TimerTick(object? state)
    {
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            // ignore
        }
    }

    private async void HandlePaymentUpdate(PaymentDto updatedPayment)
    {
        try
        {
            Logger.LogInformation("Получено обновление платежа: {PaymentId}, Статус: {Status}",
                updatedPayment.Id, updatedPayment.Status);

            var existingPayment = _payments.FirstOrDefault(p => p.Id == updatedPayment.Id);
            if (existingPayment is not null)
            {
                var index = _payments.IndexOf(existingPayment);
                _payments[index] = updatedPayment;
                Logger.LogInformation("Обновлен существующий платеж: {PaymentId}", updatedPayment.Id);
            }
            else
            {
                _payments.Insert(0, updatedPayment);
                Logger.LogInformation("Добавлен новый платеж: {PaymentId}", updatedPayment.Id);
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при обновлении платежа {PaymentId}", updatedPayment.Id);
        }
    }

    private async void HandlePaymentDeleted(Guid paymentId)
    {
        try
        {
            Logger.LogInformation("Получено уведомление об удалении платежа: {PaymentId}", paymentId);

            var payment = _payments.FirstOrDefault(p => p.Id == paymentId);
            if (payment is null) return;

            _payments.Remove(payment);
            Logger.LogInformation("Платеж удален из списка: {PaymentId}", paymentId);

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при удалении платежа {PaymentId}", paymentId);
        }
    }

    public void Dispose()
    {
        _refreshTimer.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            NotificationService.UnsubscribeFromPaymentUpdates();
            NotificationService.UnsubscribeFromPaymentDeletions();
            await _refreshTimer.DisposeAsync();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при освобождении ресурсов на странице платежей");
        }
    }

    private async Task LoadPayments()
    {
        try
        {
            _isLoading = true;
            _payments = _isShowAll
                ? await PaymentService.GetPayments()
                : await PaymentService.GetUserPayments();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке платежей", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SearchPaymentsByUserId()
    {
        _searchError = string.Empty;

        if (string.IsNullOrWhiteSpace(_searchUserId))
        {
            await LoadPayments();
            _isFiltered = false;
            return;
        }

        if (!Guid.TryParse(_searchUserId, out var userId))
        {
            _searchError = "Некорректный формат ID пользователя";
            return;
        }

        try
        {
            _isLoading = true;
            _payments = await PaymentService.GetPaymentsByUserId(userId);
            _isFiltered = true;

            if (_payments.Count == 0)
            {
                Snackbar.Add("Платежи по указанному ID пользователя не найдены", Severity.Info);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при поиске платежей по ID пользователя {UserId}", userId);
            Snackbar.Add("Ошибка при поиске платежей", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        _searchUserId = string.Empty;
        _searchError = string.Empty;
        _isFiltered = false;
        await LoadPayments();
    }

    private async Task CancelPayment(PaymentDto payment)
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Подтверждение отмены",
            ["ContentText"] = $"Вы уверены, что хотите отменить платеж на сумму {payment.Amount}?",
            ["ButtonText"] = "Отменить платеж",
            ["CancelText"] = "Назад"
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            try
            {
                _isLoading = true;
                var apiResult = await PaymentService.CancelPayment(payment.Id);
                if (apiResult.Code == HttpStatusCode.OK)
                {
                    Snackbar.Add("Платеж успешно отменен", Severity.Success);
                    await LoadPayments();
                }
                else
                {
                    var error = !string.IsNullOrEmpty(apiResult.Content) ? apiResult.Content : "Ошибка при отмене платежа";
                    Snackbar.Add(error, Severity.Error);
                }
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Ошибка при отмене платежа {PaymentId}", payment.Id);
                Snackbar.Add("Ошибка при отмене платежа", Severity.Error);
            }
            finally
            {
                _isLoading = false;
            }
        }
    }

    private async Task PaymentManualConfirm(PaymentDto dto)
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Подтверждение платежа",
            ["ContentText"] = $"Вы уверены, что хотите подтвердить платеж на сумму {dto.Amount}?",
            ["ButtonText"] = "Подтвердить платеж",
            ["CancelText"] = "Назад"
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            try
            {
                _isLoading = true;
                var apiResult = await PaymentService.ManualConfirmPayment(dto.Id);
                if (apiResult.Code == HttpStatusCode.OK)
                {
                    Snackbar.Add("Платеж подтвержден", Severity.Success);
                }
                else
                {
                    var error = !string.IsNullOrEmpty(apiResult.Content) ? apiResult.Content : "Ошибка подтверждения";
                    Snackbar.Add(error, Severity.Error);
                }
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Ошибка при подтверждении платежа {PaymentId}", dto.Id);
                Snackbar.Add("Ошибка при подтверждении платежа", Severity.Error);
            }
            finally
            {
                _isLoading = false;
            }
        }
    }

    private static Color GetStatusColor(PaymentStatus status) => status switch
    {
        PaymentStatus.Created => Color.Primary,
        PaymentStatus.Pending => Color.Warning,
        PaymentStatus.Confirmed => Color.Success,
        PaymentStatus.ManualConfirm => Color.Secondary,
        PaymentStatus.Expired => Color.Error,
        PaymentStatus.Canceled => Color.Error,
        _ => Color.Default
    };

    private static string GetStatusText(PaymentStatus status) => status switch
    {
        PaymentStatus.Created => "Создан",
        PaymentStatus.Pending => "Ожидание",
        PaymentStatus.Confirmed => "Принят",
        PaymentStatus.ManualConfirm => "Принят (вручную)",
        PaymentStatus.Expired => "Истек",
        PaymentStatus.Canceled => "Отменен",
        _ => "Неизвестно"
    };

    private static string GetRemainingPendingTime(PaymentDto payment)
    {
        if (payment.ExpiresAt is null)
        {
            return "";
        }

        var remaining = payment.ExpiresAt.Value - DateTime.Now;

        var totalMinutes = Math.Ceiling(remaining.TotalMinutes);
        return $" {totalMinutes} мин";
    }

}