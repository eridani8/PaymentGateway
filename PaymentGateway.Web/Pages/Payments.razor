@page "/payments"
@attribute [Authorize(Roles = "User,Admin,Support")]
@using PaymentGateway.Shared.DTOs.Payment
@using PaymentGateway.Shared.Enums
@inject IPaymentService PaymentService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ILogger<Requisites> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject SignalRService SignalRService
@implements IAsyncDisposable
@implements IDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список платежей</MudText>
                    <MudSpacer/>
                </MudToolBar>
                <MudDataGrid T="PaymentDto"
                             Items="_payments"
                             Loading="@_isLoading"
                             LoadingProgressColor="Color.Primary"
                             SortMode="SortMode.Multiple"
                             Bordered="true"
                             Hover="true">
                    <Columns>
                        <HierarchyColumn/>
                        <PropertyColumn Property="x => x.Amount" Title="Сумма"/>
                        <TemplateColumn Title="Статус">
                            <CellTemplate Context="cellContext">
                                <MudChip Color="@GetStatusColor(cellContext.Item.Status)" Size="Size.Medium">
                                    @GetStatusText(cellContext.Item.Status)
                                    @if (cellContext.Item.Status == PaymentStatus.Pending)
                                    {
                                        @GetRemainingPendingTime(cellContext.Item)
                                    }
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.CreatedAt" Title="Создан"/>
                        <PropertyColumn Property="x => x.ProcessedAt ?? DateTime.MinValue" Title="Обработан"/>
                        <PropertyColumn Property="x => x.ExpiresAt ?? DateTime.MinValue" Title="Истечение"/>
                    </Columns>
                    <ChildRowContent Context="rowContext">
                        <MudCard>
                            <MudTooltip Placement="Placement.Left" Text="Id платежа">
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2"/>
                                    <MudText Typo="Typo.body1">@rowContext.Item.Id</MudText>
                                </MudStack>
                            </MudTooltip>
                            <MudTooltip Placement="Placement.Left" Text="Id внешнего платежа">
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.Source" Class="mr-2"/>
                                    <MudText Typo="Typo.body1">@rowContext.Item.ExternalPaymentId</MudText>
                                </MudStack>
                            </MudTooltip>
                            @if (rowContext.Item.Requisite != null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id реквизита">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.Payment" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.Requisite.Id</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                        </MudCard>
                    </ChildRowContent>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<PaymentDto> _payments = [];
    private bool _isAdminUser;
    private Timer _refreshTimer = null!;
    private const int RefreshInterval = 3000;
    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isAdminUser = authState.User.IsInRole("Admin");

        await LoadPayments();

        if (!_isInitialized)
        {
            try
            {
                await SignalRService.InitializeAsync();
                SignalRService.SubscribeToPaymentUpdates(HandlePaymentUpdate);
                SignalRService.SubscribeToPaymentDeletions(HandlePaymentDeleted);
                _isInitialized = true;
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Ошибка при инициализации SignalR");
            }
        }

        _refreshTimer = new Timer(TimerTick, null, RefreshInterval, RefreshInterval);
    }

    private void TimerTick(object? state)
    {
        StateHasChanged();
    }

    private void HandlePaymentUpdate(PaymentDto updatedPayment)
    {
        try
        {
            var existingRequisite = _payments.FirstOrDefault(r => r.Id == updatedPayment.Id);
            if (existingRequisite != null)
            {
                var index = _payments.IndexOf(existingRequisite);
                _payments[index] = updatedPayment;
            }
            else
            {
                _payments.Add(updatedPayment);
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при обновлении платежа {PaymentId}", updatedPayment.Id);
        }
    }

    private void HandlePaymentDeleted(Guid paymentId)
    {
        try
        {
            var requisite = _payments.FirstOrDefault(r => r.Id == paymentId);
            if (requisite == null) return;
            _payments.Remove(requisite);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при удалении платежа {PaymentId}", paymentId);
        }
    }

    public void Dispose()
    {
        _refreshTimer.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_isInitialized)
            {
                SignalRService.UnsubscribeFromPaymentUpdates();
                SignalRService.UnsubscribeFromPaymentDeletions();
                await SignalRService.DisposeAsync();
                _isInitialized = false;
            }

            await _refreshTimer.DisposeAsync();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при освобождении ресурсов на странице платежей");
        }
    }

    private async Task LoadPayments()
    {
        try
        {
            _isLoading = true;
            _payments = _isAdminUser
                ? await PaymentService.GetPayments()
                : await PaymentService.GetUserPayments();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке платежей", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private static Color GetStatusColor(PaymentStatus status) => status switch
    {
        PaymentStatus.Created => Color.Warning,
        PaymentStatus.Pending => Color.Primary,
        PaymentStatus.Confirmed => Color.Success,
        PaymentStatus.ManualConfirm => Color.Success,
        PaymentStatus.Expired => Color.Error,
        _ => Color.Default
    };
    
    private static string GetStatusText(PaymentStatus status) => status switch
    {
        PaymentStatus.Created => "Создан",
        PaymentStatus.Pending => "Ожидание",
        PaymentStatus.Confirmed => "Принят",
        PaymentStatus.ManualConfirm => "Принят (вручную)",
        PaymentStatus.Expired => "Истек",
        _ => "Неизвестно"
    };
    
    private static string GetRemainingPendingTime(PaymentDto payment)
    {
        if (payment.ExpiresAt == null)
        {
            return "";
        }

        var remaining = payment.ExpiresAt.Value - DateTime.Now;

        var totalMinutes = Math.Ceiling(remaining.TotalMinutes);
        return $" {totalMinutes} мин";
    }
}