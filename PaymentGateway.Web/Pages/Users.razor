@page "/users"
@using PaymentGateway.Shared.DTOs.User
@using PaymentGateway.Shared.Interfaces
@attribute [Authorize(Roles = "Admin")]
@inject IAdminService AdminService
@inject IDialogService DialogService
@inject ILogger<Users> Logger
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject SignalRService SignalRService
@implements IAsyncDisposable

<AuthorizeView Roles="Admin">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список пользователей</MudText>
                    <MudSpacer/>
                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.Add"
                        OnClick="@(OpenCreateDialog)">
                        Создать пользователя
                    </MudButton>
                    <MudSpacer/>
                    <AuthorizeView Roles="Admin">
                        <Authorized Context="adminContext">
                            <MudStack Row="true" Spacing="1">
                                <MudTextField @bind-Value="_searchUserId" Label="ID пользователя"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@Icons.Material.Filled.Search"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Normal"
                                              Placeholder="Фильтр по пользователю"
                                              Error="@(!string.IsNullOrEmpty(_searchError))"
                                              ErrorText="@_searchError"
                                              Style="width: 600px"/>
                                <MudButton Color="Color.Primary"
                                           Variant="Variant.Outlined"
                                           OnClick="@(SearchUserById)"
                                           Style="height: 56px; align-self: flex-start; margin-top: 16px;">Найти
                                </MudButton>
                                @if (_isFiltered)
                                {
                                    <MudButton Color="Color.Secondary"
                                               Variant="Variant.Outlined"
                                               OnClick="@(ClearSearch)"
                                               Style="height: 56px; align-self: flex-start; margin-top: 16px;">Сбросить
                                    </MudButton>
                                }
                            </MudStack>
                        </Authorized>
                    </AuthorizeView>
                </MudToolBar>
                <MudDataGrid T="UserDto"
                             Items="@_users"
                             Loading="@_isLoading"
                             LoadingProgressColor="Color.Primary"
                             SortMode="SortMode.Multiple"
                             Filterable="true"
                             Hideable="true"
                             Bordered="true"
                             Hover="true">
                    <Columns>
                        <HierarchyColumn/>
                        <PropertyColumn Property="x => x.Username" Title="Логин"/>
                        <TemplateColumn Title="Лимит реквизитов">
                            <CellTemplate Context="cellContext">
                                @($"{cellContext.Item.RequisitesCount}/{cellContext.Item.MaxRequisitesCount}")
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Суточный лимит">
                            <CellTemplate Context="cellContext">
                                @($"{cellContext.Item.ReceivedDailyFunds:N0}/{cellContext.Item.MaxDailyMoneyReceptionLimit:N0}")
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Роль">
                            <CellTemplate Context="cellContext">
                                @foreach (var role in cellContext.Item.Roles)
                                {
                                    <MudChip Color="@GetRoleColor(role)">@role</MudChip>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Статус">
                            <CellTemplate Context="cellContext">
                                <MudChip Color="@(cellContext.Item.IsActive ? Color.Success : Color.Error)"
                                         Size="Size.Medium">
                                    @(cellContext.Item.IsActive ? "Активен" : "Неактивен")
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Действия">
                            <CellTemplate Context="cellContext">
                                @if (cellContext.Item.Username != "root")
                                {
                                    <MudIconButton
                                        Icon="@Icons.Material.Filled.Edit"
                                        Color="Color.Primary"
                                        Size="Size.Small"
                                        OnClick="@(() => OpenEditDialog(cellContext.Item))">
                                        Редактировать
                                    </MudIconButton>
                                    <MudIconButton
                                        Icon="@Icons.Material.Filled.Delete"
                                        Color="Color.Error"
                                        Size="Size.Small"
                                        OnClick="@(() => OpenDeleteDialog(cellContext.Item))">Удалить
                                    </MudIconButton>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <ChildRowContent Context="rowContext">
                        <MudStack>
                            <MudTooltip Placement="Placement.Left" Text="Id пользователя">
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.AssignmentInd" Class="mr-2" />
                                    <MudText Typo="Typo.body1">@rowContext.Item.Id</MudText>
                                </MudStack>
                            </MudTooltip>
                        </MudStack>
                    </ChildRowContent>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<UserDto> _users = [];
    private bool _isInitialized;
    private string _searchUserId = string.Empty;
    private string _searchError = string.Empty;
    private bool _isFiltered;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();

        if (!_isInitialized)
        {
            try
            {
                await SignalRService.InitializeAsync();
                SignalRService.SubscribeToUserUpdates(HandleUserUpdate);
                SignalRService.SubscribeToUserDeletions(HandleUserDeleted);
                _isInitialized = true;
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Ошибка при инициализации SignalR");
            }
        }
    }

    private async void HandleUserUpdate(UserDto updatedUser)
    {
        try
        {
            Logger.LogInformation("Получено обновление пользователя: {UserId}", updatedUser.Id);
                
            var existingUser = _users.FirstOrDefault(u => u.Id == updatedUser.Id);
            if (existingUser != null)
            {
                var index = _users.IndexOf(existingUser);
                _users[index] = updatedUser;
                Logger.LogInformation("Обновлен существующий пользователь: {UserId}", updatedUser.Id);
            }
            else
            {
                _users.Add(updatedUser);
                Logger.LogInformation("Добавлен новый пользователь: {UserId}", updatedUser.Id);
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при обновлении пользователя {UserId}", updatedUser.Id);
        }
    }

    private async void HandleUserDeleted(Guid userId)
    {
        try
        {
            Logger.LogInformation("Получено уведомление об удалении пользователя: {UserId}", userId);
            
            var user = _users.FirstOrDefault(u => u.Id == userId);
            if (user == null) return;
            
            _users.Remove(user);
            Logger.LogInformation("Пользователь удален из списка: {UserId}", userId);
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при удалении пользователя {UserId}", userId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_isInitialized)
            {
                SignalRService.UnsubscribeFromUserUpdates();
                SignalRService.UnsubscribeFromUserDeletions();
                await SignalRService.DisposeAsync();
                _isInitialized = false;
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при освобождении ресурсов на странице пользователей");
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            _isLoading = true;
            _users = await AdminService.GetAllUsers();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке пользователей", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        await DialogService.ShowAsync<CreateUserDialog>(null);
    }

    private async Task OpenDeleteDialog(UserDto user)
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Подтверждение удаления",
            ["ContentText"] = $"Вы действительно хотите удалить пользователя <b>{user.Username}</b>?",
            ["ButtonText"] = "Да",
            ["CancelText"] = "Нет"
        };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            try
            {
                var deleteResult = await AdminService.DeleteUser(user.Id);
                
                if (deleteResult)
                {
                    Snackbar.Add($"Пользователь {user.Username} успешно удален", Severity.Success);
                    await LoadUsers();
                }
                else
                {
                    Snackbar.Add("Ошибка при удалении пользователя", Severity.Error);
                }
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Ошибка при удалении пользователя {UserId}", user.Id);
                Snackbar.Add(e.Message, Severity.Error);
            }
        }
    }

    private async Task OpenEditDialog(UserDto user)
    {
        var parameters = new DialogParameters
        {
            ["User"] = user
        };

        var dialog = await DialogService.ShowAsync<EditUserDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            var updateDto = (UpdateUserDto)result.Data!;
            try
            {
                await AdminService.UpdateUser(updateDto);
            }
            catch (Exception e)
            {
                Logger.LogError(e, e.Message);
                Snackbar.Add("Ошибка при обновлении пользователя", Severity.Error);
            }
        }
    }

    public static Color GetRoleColor(string role) => role switch
    {
        "Admin" => Color.Warning,
        "User" => Color.Secondary,
        "Support" => Color.Info,
        _ => Color.Default
    };

    private async Task SearchUserById()
    {
        _searchError = string.Empty;

        if (string.IsNullOrWhiteSpace(_searchUserId))
        {
            await LoadUsers();
            _isFiltered = false;
            return;
        }

        if (!Guid.TryParse(_searchUserId, out var userId))
        {
            _searchError = "Некорректный формат ID пользователя";
            return;
        }

        try
        {
            _isLoading = true;
            if (await AdminService.GetUserById(userId) is { } user)
            {
                _users = [user];
            }
            else
            {
                _users = [];
            }
            
            _isFiltered = true;

            if (_users.Count == 0)
            {
                Snackbar.Add("Пользователи по указанному ID не найдены", Severity.Info);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при поиске пользователя {UserId}", userId);
            Snackbar.Add("Ошибка при поиске реквизитов", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task ClearSearch()
    {
        _searchUserId = string.Empty;
        _searchError = string.Empty;
        _isFiltered = false;
        await LoadUsers();
    }

}