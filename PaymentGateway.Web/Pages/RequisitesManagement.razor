@page "/RequisitesManagement"
@using PaymentGateway.Shared.DTOs.Requisite
@using PaymentGateway.Shared.Enums
@using PaymentGateway.Web.Dialogs
@using System.Timers
@attribute [Authorize(Roles = "User")]
@inject IRequisiteService RequisiteService
@inject ILogger<RequisitesManagement> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@implements IDisposable

<AuthorizeView Roles="User">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4" Style="height: calc(100vh - 97px); padding: 0;">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список реквизитов</MudText>
                    <MudSpacer/>
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.Add"
                        OnClick="OpenCreateDialog">
                        Создать реквизит
                    </MudButton>
                </MudToolBar>
                <MudTable Items="@_requisites"
                          Loading="@_isLoading"
                          Hover="true"
                          Breakpoint="Breakpoint.Sm"
                          Bordered="true"
                          FixedHeader="true"
                          Height="100%"
                          Width="100%">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Имя</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Платежные данные</MudTh>
                        <MudTh>Использовано/Лимит</MudTh>
                        <MudTh>Статус</MudTh>
                        <MudTh>Задержка</MudTh>
                        <MudTh>Активное время</MudTh>
                        <MudTh>Приоритет</MudTh>
                        <MudTh>Действия</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="requisite">
                        <MudTd DataLabel="ID">@requisite.Id</MudTd>
                        <MudTd DataLabel="Имя">@requisite.FullName</MudTd>
                        <MudTd
                            DataLabel="Тип">@(requisite.PaymentType == PaymentType.PhoneNumber ? "Телефон" : "Карта")</MudTd>
                        <MudTd DataLabel="Платежные данные">@requisite.PaymentData</MudTd>
                        <MudTd DataLabel="Использовано/Лимит">@($"{requisite.ReceivedFunds:N0}/{requisite.MaxAmount:N0}")</MudTd>
                        <MudTd DataLabel="Статус">
                            <MudChip T="string" Color="@GetStatusColor(requisite.Status)" Size="Size.Medium">
                                @GetStatusText(requisite.Status)
                                @if (requisite.Status == RequisiteStatus.Cooldown)
                                {
                                    @GetRemainingCooldownTime(requisite)
                                }
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Задержка">@($"{(int)requisite.Cooldown.TotalMinutes} мин")</MudTd>
                        <MudTd DataLabel="Активное время">
                            @if (requisite.WorkFrom == TimeOnly.MinValue && requisite.WorkTo == TimeOnly.MinValue)
                            {
                                @("Всегда")
                            }
                            else
                            {
                                @($"{requisite.WorkFrom:HH:mm} - {requisite.WorkTo:HH:mm}")
                            }
                        </MudTd>
                        <MudTd DataLabel="Приоритет">@requisite.Priority</MudTd>
                        <MudTd DataLabel="Действия">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                          Color="Color.Primary" 
                                          Size="Size.Small"
                                          OnClick="@(() => OpenEditDialog(requisite))" 
                                          Title="Редактировать" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<RequisiteDto> _requisites = [];
    private Timer _timer = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadRequisites();

        _timer = new Timer(3000);
        _timer.Elapsed += async (_, _) => await InvokeAsync(async () =>
        {
            await LoadRequisites();
            StateHasChanged();
        });
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private async Task LoadRequisites()
    {
        try
        {
            _isLoading = true;
            _requisites = await RequisiteService.GetUserRequisites();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке реквизитов", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateRequisiteDialog>(null);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private async Task OpenEditDialog(RequisiteDto requisite)
    {
        var parameters = new DialogParameters
        {
            ["Requisite"] = requisite
        };
        
        var dialog = await DialogService.ShowAsync<EditRequisiteDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private static Color GetStatusColor(RequisiteStatus status) => status switch
    {
        RequisiteStatus.Active => Color.Success,
        RequisiteStatus.Pending => Color.Warning,
        RequisiteStatus.Cooldown => Color.Info,
        RequisiteStatus.Inactive => Color.Error,
        _ => Color.Default
    };

    private static string GetStatusText(RequisiteStatus status) => status switch
    {
        RequisiteStatus.Active => "Активный",
        RequisiteStatus.Pending => "Ожидание",
        RequisiteStatus.Cooldown => "Перерыв",
        RequisiteStatus.Inactive => "Неактивный",
        _ => "Неизвестно"
    };

    private static string GetRemainingCooldownTime(RequisiteDto requisite)
    {
        if (requisite.LastOperationTime == null)
        {
            return "";
        }

        var cooldownEnd = requisite.LastOperationTime.Value.Add(requisite.Cooldown);
        var remaining = cooldownEnd - DateTime.Now;

        var totalMinutes = Math.Ceiling(remaining.TotalMinutes);
        return $" - {totalMinutes} мин";
    }

}