@page "/RequisitesManagement"
@using PaymentGateway.Shared.DTOs.Requisite
@using PaymentGateway.Shared.Enums
@attribute [Authorize(Roles = "User,Admin,Support")]
@inject IRequisiteService RequisiteService
@inject ILogger<RequisitesManagement> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject SignalRService SignalRService
@implements IAsyncDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список реквизитов</MudText>
                    <MudSpacer/>
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.Add"
                        OnClick="OpenCreateDialog">
                        Создать реквизит
                    </MudButton>
                </MudToolBar>
                <MudDataGrid T="RequisiteDto" 
                             Items="_requisites" 
                             Loading="@_isLoading"
                             SortMode="SortMode.Multiple"
                             Filterable="true"
                             Hideable="true" 
                             Bordered="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="ID"/>
                        <PropertyColumn Property="x => x.UserId" Title="ID пользователя" Hidden="@(!_isAdminUser)"/>
                        <PropertyColumn Property="x => x.FullName" Title="Имя"/>
                        <TemplateColumn Title="Тип">
                            <CellTemplate Context="cellContext">
                                @(cellContext.Item.PaymentType == PaymentType.PhoneNumber ? "Телефон" : "Карта")
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.PaymentData" Title="Платежные данные"/>
                        <TemplateColumn Title="Использовано/Лимит">
                            <CellTemplate Context="cellContext">
                                @($"{cellContext.Item.ReceivedFunds:N0}/{cellContext.Item.MaxAmount:N0}")
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Статус">
                            <CellTemplate Context="cellContext">
                                <MudChip Color="@GetStatusColor(cellContext.Item.Status)" Size="Size.Medium">
                                    @GetStatusText(cellContext.Item.Status)
                                    @if (cellContext.Item.Status == RequisiteStatus.Cooldown)
                                    {
                                        @GetRemainingCooldownTime(cellContext.Item)
                                    }
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Задержка">
                            <CellTemplate Context="cellContext">
                                @($"{(int)cellContext.Item.Cooldown.TotalMinutes} мин")
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Активное время">
                            <CellTemplate Context="cellContext">
                                @if (cellContext.Item.WorkFrom == TimeOnly.MinValue && cellContext.Item.WorkTo == TimeOnly.MinValue)
                                {
                                    @("Всегда")
                                }
                                else
                                {
                                    @($"{cellContext.Item.WorkFrom:HH:mm} - {cellContext.Item.WorkTo:HH:mm}")
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Priority" Title="Приоритет"/>
                        <TemplateColumn Title="Действия">
                            <CellTemplate Context="cellContext">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => OpenEditDialog(cellContext.Item))"
                                               Title="Редактировать"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => OpenDeleteDialog(cellContext.Item))"
                                               Title="Удалить"/>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<RequisiteDto> _requisites = [];
    private bool _isAdminUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isAdminUser = authState.User.IsInRole("Admin");

        await LoadRequisites();
        await SignalRService.InitializeAsync();
        SignalRService.SubscribeToRequisiteUpdates(HandleRequisiteUpdate);
        SignalRService.SubscribeToRequisiteDeletions(HandleRequisiteDeleted);
    }

    private void HandleRequisiteUpdate(RequisiteDto updatedRequisite)
    {
        try
        {
            var existingRequisite = _requisites.FirstOrDefault(r => r.Id == updatedRequisite.Id);
            if (existingRequisite != null)
            {
                var index = _requisites.IndexOf(existingRequisite);
                _requisites[index] = updatedRequisite;
            }
            else
            {
                _requisites.Add(updatedRequisite);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при обновлении реквизита {RequisiteId}", updatedRequisite?.Id);
        }
    }

    private void HandleRequisiteDeleted(Guid requisiteId)
    {
        try
        {
            var requisite = _requisites.FirstOrDefault(r => r.Id == requisiteId);
            if (requisite != null)
            {
                _requisites.Remove(requisite);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при удалении реквизита {RequisiteId}", requisiteId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        SignalRService.UnsubscribeFromRequisiteUpdates();
        SignalRService.UnsubscribeFromRequisiteDeletions();
        await SignalRService.DisposeAsync();
    }

    private async Task LoadRequisites()
    {
        try
        {
            _isLoading = true;
            _requisites = _isAdminUser
                ? await RequisiteService.GetRequisites()
                : await RequisiteService.GetUserRequisites();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке реквизитов", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateRequisiteDialog>(null);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private async Task OpenEditDialog(RequisiteDto requisite)
    {
        var parameters = new DialogParameters
        {
            ["Requisite"] = requisite
        };

        var dialog = await DialogService.ShowAsync<EditRequisiteDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private async Task OpenDeleteDialog(RequisiteDto requisite)
    {
        var parameters = new DialogParameters
        {
            ["Requisite"] = requisite
        };

        var dialog = await DialogService.ShowAsync<DeleteRequisiteDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private static Color GetStatusColor(RequisiteStatus status) => status switch
    {
        RequisiteStatus.Active => Color.Success,
        RequisiteStatus.Pending => Color.Warning,
        RequisiteStatus.Cooldown => Color.Info,
        RequisiteStatus.Inactive => Color.Error,
        _ => Color.Default
    };

    private static string GetStatusText(RequisiteStatus status) => status switch
    {
        RequisiteStatus.Active => "Активный",
        RequisiteStatus.Pending => "Ожидание",
        RequisiteStatus.Cooldown => "Перерыв",
        RequisiteStatus.Inactive => "Неактивный",
        _ => "Неизвестно"
    };

    private static string GetRemainingCooldownTime(RequisiteDto requisite)
    {
        if (requisite.LastOperationTime == null)
        {
            return "";
        }

        var cooldownEnd = requisite.LastOperationTime.Value.Add(requisite.Cooldown);
        var remaining = cooldownEnd - DateTime.Now;

        var totalMinutes = Math.Ceiling(remaining.TotalMinutes);
        return $" - {totalMinutes} мин";
    }
}