@page "/chat"
@attribute [Authorize(Roles = "Admin,Support")]
@inject NavigationManager NavigationManager
@inject SignalRService SignalRService
@inject ISnackbar Snackbar
@inject ILogger<Chat> Logger
@using System.Collections.Concurrent
@using PaymentGateway.Shared.DTOs.Chat
@using PaymentGateway.Shared.DTOs.User

<AuthorizeView Roles="Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudGrid>
                <MudItem xs="12" sm="9">
                    <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                        <MudText Typo="Typo.h6" Class="mb-4">Чат</MudText>
                        <MudPaper Class="flex-grow-1 pa-4 mb-4" Style="overflow-y: auto; max-height: 500px;">
                            @foreach (var message in _messages)
                            {
                                <MudPaper Class="pa-2 mb-2" Elevation="0">
                                    <MudText>@message.Message</MudText>
                                    <MudText Typo="Typo.caption" Class="text-right">@message.Timestamp.ToString("HH:mm")</MudText>
                                </MudPaper>
                            }
                        </MudPaper>
                        <MudStack Row="true">
                            <MudTextField @bind-Value="_currentMessageText" 
                                          Variant="Variant.Outlined" 
                                          Placeholder="Введите сообщение..."
                                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send"
                                          AdornmentColor="Color.Primary"
                                          OnKeyDown="@OnKeyDown"/>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudPaper Class="pa-4" Elevation="12">
                        <MudList T="UserState">
                            @foreach (var user in _onlineUsers)
                            {
                                <MudListItem T="UserState">
                                    <MudText>@user.Value.Username</MudText>
                                    <MudText Typo="Typo.caption">@string.Join(", ", user.Value.Roles)</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private string _currentMessageText = string.Empty;
    private readonly List<ChatMessageDto> _messages = [];
    private readonly ConcurrentDictionary<Guid, UserState> _onlineUsers = new();

    protected override async Task OnInitializedAsync()
    {
        await SignalRService.InitializeAsync();
        await LoadOnlineUsers();
        SubscribeToChatEvents();
    }

    private async Task LoadOnlineUsers()
    {
        try
        {
            var users = await SignalRService.GetCurrentUsers();
            _onlineUsers.Clear();
            foreach (var user in users)
            {
                _onlineUsers.TryAdd(user.Id, user);
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при загрузке списка пользователей: {Message}", e.Message);
            Snackbar.Add($"Ошибка при загрузке списка пользователей: {e.Message}", Severity.Error);
        }
    }

    private void SubscribeToChatEvents()
    {
        SignalRService.SubscribeToChatMessages(message =>
        {
            _messages.Add(message);
            StateHasChanged();
        });

        SignalRService.SubscribeToUserConnections((userId, roles) =>
        {
            var userState = new UserState
            {
                Id = Guid.Parse(userId),
                Username = userId,
                Roles = roles
            };
            _onlineUsers.TryAdd(userState.Id, userState);
            StateHasChanged();
        });

        SignalRService.SubscribeToUserDisconnections(userId =>
        {
            if (!Guid.TryParse(userId, out var guid)) return;
            _onlineUsers.TryRemove(guid, out _);
            StateHasChanged();
        });
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_currentMessageText)) return;

        try
        {
            var message = new ChatMessageDto
            {
                Id = Guid.CreateVersion7(),
                Message = _currentMessageText,
                Timestamp = DateTime.UtcNow
            };

            await SignalRService.SendChatMessage(message);
            _currentMessageText = string.Empty;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при отправке сообщения", Severity.Error);
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

}