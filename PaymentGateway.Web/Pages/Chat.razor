@page "/chat"
@using PaymentGateway.Shared.DTOs.Chat
@using PaymentGateway.Shared.DTOs.User
@attribute [Authorize(Roles = "Admin,Support")]
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<Chat> Logger
@inject NotificationService NotificationService
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4" Style="height: 90vh; padding-bottom: 16px;">
            <MudGrid Style="height: 100%;">
                <MudItem xs="12" sm="10" Style="height: 100%;">
                    <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                        <div @ref="_chatContainer" style="overflow-y: auto; flex-grow: 1; display: flex; flex-direction: column; margin-bottom: 16px;">
                            @foreach (var message in _messages)
                            {
                                <MudChat>
                                    <MudChatHeader Time="@message.Timestamp.ToString("HH:mm:ss")"
                                                   Name="@message.Username"/>
                                    <MudChatBubble>@message.Message</MudChatBubble>
                                </MudChat>
                            }
                        </div>
                        <MudStack Row="true">
                            <MudTextField @bind-Value="_currentMessageText"
                                          Variant="Variant.Outlined"
                                          Placeholder="Введите сообщение..."
                                          Immediate="true"
                                          OnKeyDown="@OnKeyDown"/>
                            <MudButton OnClick="@(SendMessage)">
                                <MudIcon Icon="@Icons.Material.Filled.Send"></MudIcon>
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="2" Style="height: 100%;">
                    <MudPaper Class="pa-4" Elevation="12" Style="height: 100%;">
                        <MudList T="UserState">
                            @foreach (var user in _users)
                            {
                                <MudListItem T="UserState">
                                    <MudText>@user.Username</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private string _currentMessageText = string.Empty;
    private readonly List<ChatMessageDto> _messages = [];
    private List<UserState> _users = [];
    private ElementReference _chatContainer;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadChatHistory();

        NotificationService.SubscribeToUserConnected(HandleUserConnected);
        NotificationService.SubscribeToUserDisconnected(HandleUserDisconnected);
        NotificationService.SubscribeToChatMessages(HandleChatMessages);
    }

    private async Task LoadChatHistory()
    {
        try
        {
            var messages = await NotificationService.GetChatHistory();
            if (messages.Any())
            {
                _messages.AddRange(messages);
                await InvokeAsync(StateHasChanged);
                await ScrollToBottom();
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при загрузке истории сообщений");
            Snackbar.Add("Ошибка при загрузке истории сообщений", Severity.Error);
        }
    }

    private async void HandleUserConnected(UserState state)
    {
        try
        {
            if (_users.Any(u => u.Username.Equals(state.Username, StringComparison.Ordinal))) return;
            _users.Add(state);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при добавлении пользователя");
        }
    }

    private async void HandleUserDisconnected(UserState state)
    {
        try
        {
            _users.Remove(state);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при добавлении пользователя");
        }
    }

    private async void HandleChatMessages(ChatMessageDto message)
    {
        try
        {
            _messages.Add(message);
            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при добавлении сообщения");
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            _users = await NotificationService.GetAdminsAndSupports();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при загрузке списка пользователей: {Message}", e.Message);
            Snackbar.Add($"Ошибка при загрузке списка пользователей: {e.Message}", Severity.Error);
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_currentMessageText)) return;

        if (_currentMessageText.Length > 1000) Snackbar.Add("Сообщение должно быть короче 1000 символов", Severity.Error);

        await NotificationService.SendChatMessage(_currentMessageText);

        _currentMessageText = "";
        await ScrollToBottom();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("scrollToBottom", _chatContainer);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при прокрутке чата вниз");
        }
    }

    public ValueTask DisposeAsync()
    {
        NotificationService.UnsubscribeFromUserConnected();
        NotificationService.UnsubscribeFromUserDisconnected();
        NotificationService.UnsubscribeFromChatMessages();
        return ValueTask.CompletedTask;
    }

}