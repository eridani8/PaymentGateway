@page "/"
@using System.Net
@using System.Security.Claims
@using PaymentGateway.Shared.DTOs.Payment
@using PaymentGateway.Shared.Validations.Validators.Payment
@using Severity = MudBlazor.Severity
@attribute [AllowAnonymous]
@inject IPaymentService PaymentService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-16">
    <MudCard Elevation="12" Class="pa-4">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Создание платежа</MudText>

        <MudForm Model="@_paymentModel" @ref="@_form" Validation="@(_validator.ValidateValue)">
            <MudNumericField T="decimal" @bind-Value="_paymentModel.Amount" Label="Сумма" Required="true"
                             For="@(() => _paymentModel.Amount)" Immediate="true" Min="0" Step="1000"/>
        </MudForm>

        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="@(CreatePayment)" Class="mt-4"
                   Disabled="@_isLoading">
            @if (_isLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Загрузка...</MudText>
            }
            else
            {
                <MudText>Создать платеж</MudText>
            }
        </MudButton>
    </MudCard>
</MudContainer>

@code {
    private readonly PaymentCreateDtoValidator _validator = new();
    private readonly PaymentCreateDto _paymentModel = new();
    private MudForm _form = null!;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _paymentModel.ExternalPaymentId = Guid.NewGuid();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userIdClaim, out var userId))
            {
                _paymentModel.UserId = userId;
            }
        }
    }

    private async Task CreatePayment()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        _isLoading = true;
        try
        {
            var newPayment = await PaymentService.CreatePayment(_paymentModel);
            if (newPayment is not null && newPayment != Guid.Empty)
            {
                Navigation.NavigateTo($"/payment/{newPayment}");
            }
            else
            {
                Snackbar.Add("Ошибка при создании платежа");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при создании платежа: {ex.Message}", Severity.Error);
            _isLoading = false;
        }
    }
}