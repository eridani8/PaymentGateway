@page "/"
@using System.Security.Claims
@using PaymentGateway.Shared.DTOs.Payment
@using PaymentGateway.Shared.DTOs.User
@using PaymentGateway.Shared.Validations.Validators.Payment
@using Severity = MudBlazor.Severity
@attribute [AllowAnonymous]
@inject IPaymentService PaymentService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@inject NotificationService NotificationService
@inject ILogger<Home> Logger
@implements IDisposable

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="mt-8">
    <MudStack>
       @if (_walletDto is not null)
       {
           <AuthorizeView>
               <Authorized>
                   <MudCard Elevation="12" Class="pa-8">
                       <MudGrid>
                           <MudItem xs="6">
                               <MudText><strong>Баланс:</strong></MudText>
                           </MudItem>
                           <MudItem xs="6" Class="d-flex justify-end">
                               <MudText><strong>@_walletDto.Balance</strong></MudText>
                           </MudItem>
                           <MudItem xs="6">
                               <MudText><strong>Заморожено:</strong></MudText>
                           </MudItem>
                           <MudItem xs="6" Class="d-flex justify-end">
                               <MudText><strong>@_walletDto.Frozen</strong></MudText>
                           </MudItem>
                           <MudItem xs="6">
                               <MudText><strong>Доход:</strong></MudText>
                           </MudItem>
                           <MudItem xs="6" Class="d-flex justify-end">
                               <MudText><strong>@_walletDto.Profit</strong></MudText>
                           </MudItem>
                       </MudGrid>
                   </MudCard>
               </Authorized>
           </AuthorizeView>
       }
        <MudCard Elevation="12" Class="pa-8 mt-6">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Создание платежа</MudText>

            <MudForm Model="@_paymentModel" @ref="@_form" Validation="@(_validator.ValidateValue)">
                <MudNumericField T="decimal" 
                                 @bind-Value="_paymentModel.Amount" 
                                 Label="Сумма" Required="true"
                                 For="@(() => _paymentModel.Amount)" 
                                 Immediate="true"
                                 Max="@(_walletDto?.Balance ?? 0)"
                                 Min="0" 
                                 Step="1000"/>
            </MudForm>

            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="@(CreatePayment)" Class="mt-4"
                       Disabled="@_isLoading">
                @if (_isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Загрузка...</MudText>
                }
                else
                {
                    <MudText>Создать платеж</MudText>
                }
            </MudButton>
        </MudCard>
    </MudStack>
</MudContainer>

@code {
    private readonly PaymentCreateDtoValidator _validator = new();
    private readonly PaymentCreateDto _paymentModel = new();
    private MudForm _form = null!;
    private bool _isLoading;
    private WalletDto? _walletDto;

    protected override async Task OnInitializedAsync()
    {
        _paymentModel.ExternalPaymentId = Guid.NewGuid();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        if (claimsPrincipal.Identity is { IsAuthenticated: true })
        {
            var userIdClaim = claimsPrincipal.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (Guid.TryParse(userIdClaim, out var userId))
            {
                _paymentModel.UserId = userId;
                
                _walletDto = await UserService.GetWalletState() ?? new WalletDto()
                {
                    UserId = _paymentModel.UserId ?? Guid.Empty,
                    Balance = 0,
                    Frozen = 0,
                    Profit = 0
                };
                
                NotificationService.SubscribeToWalletUpdates(HandleWalletUpdate);
            }
        }
    }

    private async void HandleWalletUpdate(WalletDto walletDto)
    {
        try
        {
            _walletDto = walletDto;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при обновлении кошелька пользователя");
        }
    }

    private async Task CreatePayment()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        _isLoading = true;
        try
        {
            var newPayment = await PaymentService.CreatePayment(_paymentModel);
            if (newPayment is not null && newPayment != Guid.Empty)
            {
                Navigation.NavigateTo($"/payment/{newPayment}");
            }
            else
            {
                Snackbar.Add("Ошибка при создании платежа");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при создании платежа: {ex.Message}", Severity.Error);
            _isLoading = false;
        }
    }

    public void Dispose()
    {
        NotificationService.UnsubscribeFromWalletUpdates();
    }
}