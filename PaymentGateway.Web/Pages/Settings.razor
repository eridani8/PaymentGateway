@page "/Settings"
@using System.Net
@using PaymentGateway.Shared.DTOs.User
@using PaymentGateway.Shared.Validations
@using PaymentGateway.Shared.Validations.Validators
@using PaymentGateway.Shared.Validations.Validators.User
@using Severity = MudBlazor.Severity
@attribute [Authorize]
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudContainer>
    <MudGrid Justify="Justify.Center" Class="mt-6">
        <MudItem xs="12" sm="8" md="6">
            <MudCard Elevation="12" Class="mt-4">
                <MudCardContent>
                    <MudForm @ref="_form" Model="@_changePasswordDto" Validation="@(_validator.ValidateValue)">
                        <MudTextField T="string"
                                     Label="Текущий пароль"
                                     FullWidth="true"
                                     @bind-Value="_changePasswordDto.CurrentPassword"
                                     InputType="InputType.Password"
                                     For="@(() => _changePasswordDto.CurrentPassword)"
                                     Immediate="true"
                                     Margin="Margin.Dense"/>

                        <MudTextField T="string"
                                     Label="Новый пароль"
                                     FullWidth="true"
                                     @bind-Value="_changePasswordDto.NewPassword"
                                     InputType="InputType.Password"
                                     For="@(() => _changePasswordDto.NewPassword)"
                                     Immediate="true"
                                     Margin="Margin.Dense"/>

                        <MudTextField T="string"
                                     Label="Подтверждение пароля"
                                     FullWidth="true"
                                     @bind-Value="_changePasswordDto.ConfirmPassword"
                                     InputType="InputType.Password"
                                     For="@(() => _changePasswordDto.ConfirmPassword)"
                                     Immediate="true"
                                     Margin="Margin.Dense"/>

                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="mt-3 mb-3">@_errorMessage</MudAlert>
                        }

                        <MudButton Variant="Variant.Filled"
                                  Color="Color.Primary"
                                  FullWidth="true"
                                  Class="mt-3"
                                  OnClick="@ChangePassword">
                            Изменить пароль
                        </MudButton>
                    </MudForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private ChangePasswordDto _changePasswordDto = new();
    private MudForm _form;
    private string? _errorMessage;
    private ChangePasswordValidator _validator = new();
    
    private async Task ChangePassword()
    {
        _errorMessage = null;
        
        await _form.Validate();
        
        if (_form.IsValid)
        {
            var response = await UserService.ChangePasswordAsync(_changePasswordDto);
            
            if (response.Code == HttpStatusCode.OK)
            {
                _changePasswordDto = new ChangePasswordDto();
                Snackbar.Add("Пароль успешно изменен", Severity.Success);
                _validator = new ChangePasswordValidator();
                await _form.ResetAsync();
            }
            else if (!string.IsNullOrEmpty(response.Content))
            {
                _errorMessage = response.Content;
            }
        }
    }
}