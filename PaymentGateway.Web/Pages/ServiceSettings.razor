@page "/service-settings"
@using System.Net
@using PaymentGateway.Shared.Enums
@attribute [Authorize(Roles = "Admin")]
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IAdminService AdminService
@inject IDialogService DialogService
@inject ILogger<ServiceSettings> Logger
@implements IDisposable

<AuthorizeView Roles="Admin">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
            <MudCard Elevation="12" Class="pa-8">
                <MudGrid>
                    
                    <MudItem xs="6" Class="d-flex align-center">
                        <MudText><strong>Распределение платежей:</strong></MudText>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex justify-end">
                        <MudSelect T="RequisiteAssignmentAlgorithm"
                                   Value="_currentAlgorithm"
                                   ValueChanged="RequisiteAssignmentAlgorithmChanged">
                            <MudSelectItem Value="RequisiteAssignmentAlgorithm.Priority">Согласно приоритету</MudSelectItem>
                            <MudSelectItem Value="RequisiteAssignmentAlgorithm.Distribution">Равномерное</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="6" Class="d-flex align-center">
                        <MudText><strong>Курс USDT (1x USDT = x ₽)</strong></MudText>
                    </MudItem>
                    <MudItem xs="3" Class="d-flex justify-end">
                        <MudNumericField T="decimal"
                                         @bind-Value="_currentExchangeRate"
                                         Label="Новый курс"
                                         Required="true"
                                         Immediate="true"
                                         Min="1"
                                         Max="decimal.MaxValue"
                                         Step="1"/>
                    </MudItem>
                    <MudItem xs="3" Class="d-flex justify-end align-center">
                        <MudButton Color="Color.Secondary" OnClick="@SetExchangeRate">Применить</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCard>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {

    private RequisiteAssignmentAlgorithm _currentAlgorithm;
    private decimal _currentExchangeRate = 1;

    protected override async Task OnInitializedAsync()
    {
        _currentAlgorithm = await AdminService.GetCurrentRequisiteAssignmentAlgorithm();
        NotificationService.SubscribeToChangeRequisiteAssignmentAlgorithm(HandleChangeRequisiteAssignmentAlgorithm);
        NotificationService.SubscribeToExchangeRateUpdates(HandleChangeExchangeRate);
        try
        {
            _currentExchangeRate = await AdminService.GetCurrentUsdtExchangeRate();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка получения текущего обменного курса USDT");
        }
    }
    
    private void HandleChangeRequisiteAssignmentAlgorithm(int algorithm)
    {
        _currentAlgorithm = (RequisiteAssignmentAlgorithm)algorithm;
    }

    private void HandleChangeExchangeRate(decimal rate)
    {
        _currentExchangeRate = rate;
    }

    private async Task RequisiteAssignmentAlgorithmChanged(RequisiteAssignmentAlgorithm algorithm)
    {
        var result = await AdminService.SetRequisiteAssignmentAlgorithm((int)algorithm);
        if (result.Code != HttpStatusCode.OK)
        {
            Snackbar.Add("Ошибка при назначении алгоритма подбора реквизита", Severity.Error);
        }
    }

    public void Dispose()
    {
        NotificationService.UnsubscribeFromChangeRequisiteAssignmentAlgorithm();
        NotificationService.UnsubscribeToExchangeRateUpdates();
    }

    private async Task SetExchangeRate()
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Установка курса",
            ["ContentText"] = $"Вы действительно хотите установить курс 1 USDT = {_currentExchangeRate} ₽?",
            ["ButtonText"] = "Да"
        };
        
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, parameters);
        var result = await dialog.Result;
        
        if (result is { Canceled: false })
        {
            try
            {
                var setResult = await AdminService.SetCurrentUsdtExchangeRate(_currentExchangeRate);

                if (setResult.Code == HttpStatusCode.OK)
                {
                    Snackbar.Add("Обменный курс USDT успешно установлен", Severity.Success);
                }
                else
                {
                    var error = !string.IsNullOrEmpty(setResult.Content) ? setResult.Content : "Ошибка назначения обменного курса USDT";
                    Snackbar.Add(error, Severity.Error);
                }
            }
            catch (Exception e)
            {
                const string error = "Ошибка при удалении установке курса";
                Logger.LogError(e, error);
                Snackbar.Add(error, Severity.Error);
            }
        }
    }
}