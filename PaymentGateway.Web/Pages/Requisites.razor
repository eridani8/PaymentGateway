@page "/requisites"
@using System.Net
@using PaymentGateway.Shared.DTOs.Requisite
@using PaymentGateway.Shared.Enums
@attribute [Authorize(Roles = "User,Admin,Support")]
@inject IRequisiteService RequisiteService
@inject IPaymentService PaymentService
@inject ILogger<Requisites> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject SignalRService SignalRService
@implements IAsyncDisposable
@implements IDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список реквизитов</MudText>
                    <MudSpacer/>
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.Add"
                        OnClick="@(OpenCreateDialog)">
                        Создать реквизит
                    </MudButton>
                </MudToolBar>
                <MudDataGrid T="RequisiteDto"
                             Items="_requisites"
                             Loading="@_isLoading"
                             LoadingProgressColor="Color.Primary"
                             SortMode="SortMode.Multiple"
                             Bordered="true"
                             Hover="true">
                    <Columns>
                        <HierarchyColumn/>
                        <PropertyColumn Property="x => x.FullName" Title="Владелец"/>
                        <TemplateColumn Title="Тип">
                            <CellTemplate Context="cellContext">
                                @(cellContext.Item.PaymentType == PaymentType.PhoneNumber ? "Телефон" : "Карта")
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.PaymentData" Title="Платежные данные"/>
                        <PropertyColumn Property="x => x.ReceivedFunds" Format="N0" Title="Использовано"/>
                        <PropertyColumn Property="x => x.MaxAmount" Format="N0" Title="Лимит"/>
                        <TemplateColumn Title="Статус">
                            <CellTemplate Context="cellContext">
                                <MudChip Color="@GetStatusColor(cellContext.Item.Status)" Size="Size.Medium">
                                    @GetStatusText(cellContext.Item.Status)
                                    @switch (cellContext.Item.Status)
                                    {
                                        case RequisiteStatus.Cooldown:
                                            @GetRemainingCooldownTime(cellContext.Item)
                                            break;
                                        case RequisiteStatus.Pending:
                                            @GetRemainingPendingTime(cellContext.Item)
                                            break;
                                    }
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => (int)x.Cooldown.TotalMinutes" Title="Задержка (мин)"/>
                        <TemplateColumn Title="Активное время">
                            <CellTemplate Context="cellContext">
                                @if (cellContext.Item.WorkFrom == TimeOnly.MinValue && cellContext.Item.WorkTo == TimeOnly.MinValue)
                                {
                                    @("Всегда")
                                }
                                else
                                {
                                    @($"{cellContext.Item.WorkFrom:HH:mm} - {cellContext.Item.WorkTo:HH:mm}")
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Priority" Title="Приоритет"/>
                        <TemplateColumn Title="Действия">
                            <CellTemplate Context="cellContext">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => OpenEditDialog(cellContext.Item))"
                                               Disabled="@(cellContext.Item.Status == RequisiteStatus.Pending)">
                                    Редактировать
                                </MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => OpenDeleteDialog(cellContext.Item))"
                                               Disabled="@(cellContext.Item.Status == RequisiteStatus.Pending)">
                                    Удалить
                                </MudIconButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <ChildRowContent Context="rowContext">
                        <MudStack>
                            <MudTooltip Placement="Placement.Left" Text="Id реквизита">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.Id</MudText>
                                    </MudStack>
                                </MudTooltip>
                                <AuthorizeView Roles="Admin">
                                    <Authorized Context="_">
                                        <MudTooltip Placement="Placement.Left" Text="Id пользователя">
                                            <MudStack Row="true">
                                                <MudIcon Icon="@Icons.Material.Filled.AssignmentInd" Class="mr-2"/>
                                                <MudText Typo="Typo.body1">@rowContext.Item.UserId</MudText>
                                            </MudStack>
                                        </MudTooltip>
                                    </Authorized>
                                </AuthorizeView>
                                @if (rowContext.Item.Payment != null)
                                {
                                    <MudTooltip Placement="Placement.Left" Text="Id платежа">
                                        <MudStack Row="true">
                                            <MudIcon Icon="@Icons.Material.Filled.Payment" Class="mr-2"/>
                                            <MudText Typo="Typo.body1">@rowContext.Item.Payment.Id</MudText>
                                        </MudStack>
                                    </MudTooltip>
                                    <MudTooltip Placement="Placement.Left" Text="Сумма платежа">
                                        <MudStack Row="true">
                                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-2"/>
                                            <MudText Typo="Typo.body1">@rowContext.Item.Payment.Amount.ToString("N0")</MudText>
                                        </MudStack>
                                    </MudTooltip>
                                    <MudStack Row="true" Class="pt-2">
                                        <MudButton OnClick="@(() => PaymentManualConfirm(rowContext.Item.Payment.Id))" Variant="Variant.Outlined" Color="Color.Warning">Подтвердить платеж</MudButton>
                                    </MudStack>
                                }
                        </MudStack>
                    </ChildRowContent>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<RequisiteDto> _requisites = [];
    private bool _isAdminUser;
    private Timer _refreshTimer = null!;
    private const int RefreshInterval = 3000;
    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isAdminUser = authState.User.IsInRole("Admin");

        await LoadRequisites();

        if (!_isInitialized)
        {
            try
            {
                await SignalRService.InitializeAsync();
                SignalRService.SubscribeToRequisiteUpdates(HandleRequisiteUpdate);
                SignalRService.SubscribeToRequisiteDeletions(HandleRequisiteDeleted);
                _isInitialized = true;
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Ошибка при инициализации SignalR");
            }
        }

        _refreshTimer = new Timer(TimerTick, null, RefreshInterval, RefreshInterval);
    }

    private async void HandleRequisiteUpdate(RequisiteDto updatedRequisite)
    {
        try
        {
            Logger.LogInformation("Получено обновление реквизита: {RequisiteId}, Статус: {Status}", 
                updatedRequisite.Id, updatedRequisite.Status);
                
            var existingRequisite = _requisites.FirstOrDefault(r => r.Id == updatedRequisite.Id);
            if (existingRequisite != null)
            {
                var index = _requisites.IndexOf(existingRequisite);
                _requisites[index] = updatedRequisite;
                Logger.LogInformation("Обновлен существующий реквизит: {RequisiteId}", updatedRequisite.Id);
            }
            else
            {
                _requisites.Add(updatedRequisite);
                Logger.LogInformation("Добавлен новый реквизит: {RequisiteId}", updatedRequisite.Id);
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при обновлении реквизита {RequisiteId}", updatedRequisite.Id);
        }
    }

    private async void HandleRequisiteDeleted(Guid requisiteId)
    {
        try
        {
            Logger.LogInformation("Получено уведомление об удалении реквизита: {RequisiteId}", requisiteId);
            
            var requisite = _requisites.FirstOrDefault(r => r.Id == requisiteId);
            if (requisite == null) return;
            
            _requisites.Remove(requisite);
            Logger.LogInformation("Реквизит удален из списка: {RequisiteId}", requisiteId);
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при удалении реквизита {RequisiteId}", requisiteId);
        }
    }

    private async void TimerTick(object? state)
    {
        try 
        {
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            // ignore
        }
    }

    public void Dispose()
    {
        _refreshTimer.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_isInitialized)
            {
                SignalRService.UnsubscribeFromRequisiteUpdates();
                SignalRService.UnsubscribeFromRequisiteDeletions();
                await SignalRService.DisposeAsync();
                _isInitialized = false;
            }

            await _refreshTimer.DisposeAsync();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при освобождении ресурсов на странице реквизитов");
        }
    }

    private async Task LoadRequisites()
    {
        try
        {
            _isLoading = true;
            _requisites = _isAdminUser
                ? await RequisiteService.GetRequisites()
                : await RequisiteService.GetUserRequisites();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке реквизитов", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateRequisiteDialog>(null);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private async Task OpenEditDialog(RequisiteDto requisite)
    {
        var parameters = new DialogParameters
        {
            ["Requisite"] = requisite
        };

        var dialog = await DialogService.ShowAsync<EditRequisiteDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private async Task OpenDeleteDialog(RequisiteDto requisite)
    {
        var parameters = new DialogParameters
        {
            ["Requisite"] = requisite
        };

        var dialog = await DialogService.ShowAsync<DeleteRequisiteDialog>(null, parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await LoadRequisites();
        }
    }

    private static Color GetStatusColor(RequisiteStatus status) => status switch
    {
        RequisiteStatus.Active => Color.Success,
        RequisiteStatus.Pending => Color.Warning,
        RequisiteStatus.Cooldown => Color.Info,
        RequisiteStatus.Inactive => Color.Error,
        _ => Color.Default
    };

    private static string GetStatusText(RequisiteStatus status) => status switch
    {
        RequisiteStatus.Active => "Активный",
        RequisiteStatus.Pending => "Ожидание",
        RequisiteStatus.Cooldown => "Перерыв",
        RequisiteStatus.Inactive => "Неактивный",
        _ => "Неизвестно"
    };

    private static string GetRemainingCooldownTime(RequisiteDto requisite)
    {
        if (requisite.LastOperationTime == null)
        {
            return "";
        }

        var cooldownEnd = requisite.LastOperationTime.Value.Add(requisite.Cooldown);
        var remaining = cooldownEnd - DateTime.Now;

        var totalMinutes = Math.Ceiling(remaining.TotalMinutes);
        return $" {totalMinutes} мин";
    }

    private static string GetRemainingPendingTime(RequisiteDto requisite)
    {
        if (requisite.Payment?.ExpiresAt == null)
        {
            return "";
        }

        var remaining = requisite.Payment.ExpiresAt.Value - DateTime.Now;

        var totalMinutes = Math.Ceiling(remaining.TotalMinutes);
        return $" {totalMinutes} мин";
    }

    private async Task PaymentManualConfirm(Guid id)
    {
        var result = await PaymentService.ManualConfirmPayment(id);
        if (result.Code == HttpStatusCode.OK)
        {
            Snackbar.Add("Платеж подтвержден", Severity.Success);
        }
        else
        {
            var error = !string.IsNullOrEmpty(result.Content) ? result.Content : "Ошибка подтверждения";
            Snackbar.Add(error, Severity.Error);
        }
    }
}