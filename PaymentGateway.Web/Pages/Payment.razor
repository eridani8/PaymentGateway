@page "/payment/{Id:guid}"
@using System.Globalization
@using System.Net
@using PaymentGateway.Shared.DTOs.Payment
@using PaymentGateway.Shared.DTOs.Transaction
@using PaymentGateway.Shared.Enums
@inject IPaymentService PaymentService
@inject ISnackbar Snackbar
@inject ILogger<Payment> Logger
@implements IDisposable

<PageTitle>Платеж @Id</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-16">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="d-block mx-auto my-8"/>
    }
    else if (_payment is null)
    {
        @if (_isRemoved)
        {
            <MudAlert Severity="Severity.Error" Class="my-4">Платеж был удален</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Error" Class="my-4">Платеж не найден или вы не имеете доступа к нему</MudAlert>
        }
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/">
            Вернуться на главную
        </MudButton>
    }
    else
    {
        <MudCard Elevation="3" Class="pa-8">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Информация о платеже</MudText>

            <MudGrid>
                <MudItem xs="6">
                    <MudText><strong>ID:</strong></MudText>
                </MudItem>
                <MudItem xs="6" Class="d-flex justify-end">
                    <MudText>@_payment.Id</MudText>
                </MudItem>

                <MudItem xs="6">
                    <MudText><strong>Сумма:</strong></MudText>
                </MudItem>
                <MudItem xs="6" Class="d-flex justify-end">
                    <MudText>@_payment.Amount</MudText>
                </MudItem>

                <MudItem xs="6">
                    <MudText><strong>Создан:</strong></MudText>
                </MudItem>
                <MudItem xs="6" Class="d-flex justify-end">
                    <MudText>@_payment.CreatedAt.ToString(CultureInfo.InvariantCulture)</MudText>
                </MudItem>

                <MudItem xs="6">
                    <MudText><strong>Оплатить до:</strong></MudText>
                </MudItem>
                <MudItem xs="6" Class="d-flex justify-end">
                    <MudText>@_payment.ExpiresAt?.ToString(CultureInfo.InvariantCulture)</MudText>
                </MudItem>
            </MudGrid>

            @if (_payment.Requisite is not null)
            {
                <MudDivider />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Данные для оплаты</MudText>

                <MudPaper Elevation="0" Class="pa-4 mb-4" Style="border-radius: 8px;">
                    <MudText Align="Align.Center" Typo="Typo.h5" Style="word-break: break-all;">
                        @GetPaymentType(_payment.Requisite.PaymentType)
                    </MudText>
                    <MudText Align="Align.Center" Typo="Typo.h5" Style="word-break: break-all;">
                        @_payment.Requisite.PaymentData
                    </MudText>
                </MudPaper>

                <MudGrid>

                    <MudItem xs="6">
                        <MudText><strong>Получатель:</strong></MudText>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex justify-end">
                        <MudText>@_payment.Requisite.FullName</MudText>
                    </MudItem>

                    @if (!string.IsNullOrEmpty(_payment.Requisite.BankNumber))
                    {
                        <MudItem xs="6">
                            <MudText><strong>Банковский счет:</strong></MudText>
                        </MudItem>
                        <MudItem xs="6" Class="d-flex justify-end">
                            <MudText>@_payment.Requisite.BankNumber</MudText>
                        </MudItem>
                    }

                </MudGrid>

                @if (_payment.Status is PaymentStatus.Confirmed or PaymentStatus.ManualConfirm)
                {
                    <MudAlert Severity="Severity.Success" Class="mt-4">Платеж успешно выполнен</MudAlert>
                }
            }
            else
            {
                <MudDivider />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-3">Ожидание свободного реквизита</MudText>

                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4"/>

                <MudText Align="Align.Center" Class="mb-4">
                    Пожалуйста, подождите. Реквизит для оплаты будет назначены автоматически
                </MudText>
            }
        </MudCard>
    }
</MudContainer>

@code {
    [Parameter] public Guid Id { get; set; }

    private PaymentDto? _payment;
    private bool _isLoading = true;
    private Timer? _refreshTimer;
    private bool _isRemoved;
    private const int refreshInterval = 7000;
    private readonly TransactionCreateDto _transactionDto = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPayment();

        if (_payment is not null)
        {
            _refreshTimer = new Timer(TimerTick, null, refreshInterval, refreshInterval);
        }
    }

    private async Task LoadPayment()
    {
        _isLoading = true;
        try
        {
            _payment = await PaymentService.GetPaymentById(Id);

            if (_payment is null)
            {
                Snackbar.Add("Платеж не найден или вы не имеете доступа к нему", Severity.Error);
                _isRemoved = true; 
            }
            else if (_payment.Status == PaymentStatus.Confirmed)
            {
                Snackbar.Add("Платеж успешно выполнен", Severity.Success);
            }
            else if (_payment.Requisite is not null)
            {
                _transactionDto.ExtractedAmount = _payment.Amount;
            }
        }
        catch (HttpRequestException httpException) when (httpException.StatusCode == HttpStatusCode.NotFound)
        {
            Snackbar.Add("Платеж не найден или был удален", Severity.Error);
            _payment = null;
            _isRemoved = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке данных платежа: {ex.Message}", Severity.Error);
            _payment = null;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async void TimerTick(object? state)
    {
        try
        {
            if (_payment is null && _isRemoved)
            {
                if (_refreshTimer != null)
                {
                    await _refreshTimer.DisposeAsync();
                    _refreshTimer = null;
                }
                await InvokeAsync(StateHasChanged);
                return;
            }
            
            var updatedPayment = await PaymentService.GetPaymentById(Id);

            if (updatedPayment is null)
            {
                if (_refreshTimer != null)
                {
                    await _refreshTimer.DisposeAsync();
                    _refreshTimer = null;
                }
                _payment = null;
                _isRemoved = true;
                await InvokeAsync(StateHasChanged);
                return;
            }

            if (_payment is not null &&
                _payment.Status == updatedPayment.Status &&
                _payment.Requisite?.Id == updatedPayment.Requisite?.Id)
            {
                return;
            }

            _payment = updatedPayment;
            _isRemoved = false;

            if (_payment.Status == PaymentStatus.Confirmed)
            {
                await InvokeAsync(() => Snackbar.Add("Платеж успешно выполнен", Severity.Success));
                if (_refreshTimer != null)
                {
                    await _refreshTimer.DisposeAsync();
                    _refreshTimer = null;
                }
            }
            else if (_payment.Requisite is not null)
            {
                _transactionDto.ExtractedAmount = _payment.Amount;
            }

            Logger.LogInformation("Обновлена информация о платеже {PaymentId}, статус: {Status}", _payment.Id, _payment.Status);
        }
        catch (HttpRequestException httpException) when (httpException.StatusCode == HttpStatusCode.NotFound)
        {
            if (_refreshTimer != null)
            {
                await _refreshTimer.DisposeAsync();
                _refreshTimer = null;
            }

            _payment = null;
            _isLoading = false;
            _isRemoved = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при обновлении данных платежа {PaymentId}", Id);
        }
    }

    public void Dispose()
    {
        if (_refreshTimer == null) return;
        _refreshTimer.Dispose();
        _refreshTimer = null;
    }

    private static string GetPaymentType(PaymentType paymentType)
    {
        return paymentType switch
        {
            PaymentType.BankCard => "Банковская карта",
            PaymentType.PhoneNumber => "Номер телефона",
            _ => "NULL"
        };
    }
}