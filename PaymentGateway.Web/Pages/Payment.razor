@page "/payment/{Id:guid}"
@using PaymentGateway.Shared.DTOs.Payment
@using PaymentGateway.Shared.Enums
@attribute [AllowAnonymous]
@inject IPaymentService PaymentService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject ILogger<Payment> Logger
@implements IDisposable

<PageTitle>Платеж</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="d-block mx-auto my-8" />
    }
    else if (_payment == null)
    {
        <MudAlert Severity="Severity.Error" Class="my-4">Платеж не найден или вы не имеете доступа к нему</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/" Class="d-block mx-auto">
            Вернуться на главную
        </MudButton>
    }
    else
    {
        <MudCard Elevation="3" Class="pa-4">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Информация о платеже</MudText>
            
            <MudGrid>
                <MudItem xs="6">
                    <MudText><strong>ID платежа:</strong></MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText>@_payment.ExternalPaymentId</MudText>
                </MudItem>
                
                <MudItem xs="6">
                    <MudText><strong>Сумма:</strong></MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText>@_payment.Amount</MudText>
                </MudItem>
                
                <MudItem xs="6">
                    <MudText><strong>Статус:</strong></MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText>@_payment.Status.ToString()</MudText>
                </MudItem>
                
                <MudItem xs="6">
                    <MudText><strong>Создан:</strong></MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText>@_payment.CreatedAt.ToString("g")</MudText>
                </MudItem>
            </MudGrid>
            
            @if (_payment.Requisite != null)
            {
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Данные для оплаты</MudText>
                
                <MudPaper Elevation="0" Class="pa-4 mb-4" Style="border-radius: 8px;">
                    <MudText Align="Align.Center" Typo="Typo.h5" Style="word-break: break-all;">
                        @_payment.Requisite.PaymentData
                    </MudText>
                </MudPaper>
                
                <MudGrid>
                    <MudItem xs="6">
                        <MudText><strong>Тип платежа:</strong></MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText>@_payment.Requisite.PaymentType.ToString()</MudText>
                    </MudItem>
                    
                    @if (!string.IsNullOrEmpty(_payment.Requisite.BankNumber))
                    {
                        <MudItem xs="6">
                            <MudText><strong>Номер банка:</strong></MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText>@_payment.Requisite.BankNumber</MudText>
                        </MudItem>
                    }
                    
                    <MudItem xs="6">
                        <MudText><strong>Получатель:</strong></MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudText>@_payment.Requisite.FullName</MudText>
                    </MudItem>
                </MudGrid>
                
                @if (_payment.Status != PaymentStatus.Confirmed)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" 
                              OnClick="@(SimulatePayment)" Class="mt-4 d-block mx-auto"
                              Disabled="@(_isSimulating)">
                        @if (_isSimulating)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Обработка...</MudText>
                        }
                        else
                        {
                            <MudText>Имитировать платеж</MudText>
                        }
                    </MudButton>
                }
                else
                {
                    <MudAlert Severity="Severity.Success" Class="mt-4">Платеж успешно выполнен</MudAlert>
                }
            }
            else
            {
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-3">Ожидание назначения реквизитов</MudText>
                
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                
                <MudText Align="Align.Center" Class="mb-4">
                    Пожалуйста, подождите. Реквизиты для оплаты будут назначены автоматически.
                </MudText>
            }
        </MudCard>
    }
</MudContainer>

@if (_showSuccessDialog)
{
    <MudDialog Open="showSuccessDialog" DisableSidePadding="true" ClassContent="px-0">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mr-2" /> 
                Платеж успешно выполнен
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudContainer Class="pa-4">
                <MudText>Платеж на сумму @_payment?.Amount был успешно обработан.</MudText>
                <MudText Class="mt-2">Статус платежа: @_payment?.Status.ToString()</MudText>
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseSuccessDialog">Закрыть</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private PaymentDto? _payment;
    private bool _isLoading = true;
    private bool _isSimulating;
    private bool _showSuccessDialog;
    private Timer? _refreshTimer;
    private const int RefreshInterval = 3000;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPayment();
        
        _refreshTimer = new Timer(TimerTick, null, RefreshInterval, RefreshInterval);
    }
    
    private async Task LoadPayment()
    {
        _isLoading = true;
        try
        {
            _payment = await PaymentService.GetPaymentById(Id);
            
            if (_payment == null)
            {
                Snackbar.Add("Платеж не найден или вы не имеете доступа к нему", Severity.Error);
            }
            else if (_payment.Status == PaymentStatus.Confirmed && !_showSuccessDialog)
            {
                _showSuccessDialog = true;
                Snackbar.Add("Платеж успешно выполнен", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке данных платежа: {ex.Message}", Severity.Error);
            _payment = null;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async void TimerTick(object? state)
    {
        try
        {
            if (_payment == null)
                return;
                
            var updatedPayment = await PaymentService.GetPaymentById(Id);
            if (updatedPayment != null && 
                (_payment.Status != updatedPayment.Status || 
                 _payment.Requisite?.Id != updatedPayment.Requisite?.Id))
            {
                _payment = updatedPayment;
                
                if (_payment.Status == PaymentStatus.Confirmed && !_showSuccessDialog)
                {
                    _showSuccessDialog = true;
                    await InvokeAsync(() => Snackbar.Add("Платеж успешно выполнен", Severity.Success));
                }
                
                await InvokeAsync(StateHasChanged);
                
                Logger.LogInformation("Обновлена информация о платеже {PaymentId}, статус: {Status}", 
                    _payment.Id, _payment.Status);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при обновлении данных платежа {PaymentId}", Id);
        }
    }

    private async Task SimulatePayment()
    {
        if (_payment == null)
            return;
            
        _isSimulating = true;
        try
        {
            var response = await PaymentService.ManualConfirmPayment(_payment.Id);
            if (response.Code == System.Net.HttpStatusCode.OK)
            {
                _payment = await PaymentService.GetPaymentById(Id);
                
                if (_payment?.Status == PaymentStatus.Confirmed)
                {
                    _showSuccessDialog = true;
                }
                
                Snackbar.Add("Платеж успешно выполнен", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Ошибка при имитации платежа: {response.Content}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при имитации платежа: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSimulating = false;
        }
    }
    
    private void CloseSuccessDialog()
    {
        _showSuccessDialog = false;
    }
    
    public void Dispose()
    {
        _refreshTimer?.Dispose();
        _refreshTimer = null;
    }
} 