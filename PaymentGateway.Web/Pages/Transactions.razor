@page "/transactions"
@attribute [Authorize(Roles = "User,Admin,Support")]
@using PaymentGateway.Shared.DTOs.Transaction
@using PaymentGateway.Shared.Enums
@inject ITransactionService TransactionService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ILogger<Transactions> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@implements IAsyncDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список транзакций</MudText>
                    <MudSpacer/>
                    <AuthorizeView Roles="Admin, Support">
                        <Authorized Context="adminContext">
                            <MudStack Row="true" Spacing="1">
                                <MudTextField @bind-Value="_searchUserId" Label="ID пользователя"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@Icons.Material.Filled.Search"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Normal"
                                              Placeholder="Фильтр по пользователю"
                                              Error="@(!string.IsNullOrEmpty(_searchError))"
                                              ErrorText="@_searchError"
                                              Style="width: 600px"/>
                                <MudButton Color="Color.Primary"
                                           Variant="Variant.Outlined"
                                           OnClick="@(SearchTransactionsByUserId)"
                                           Style="height: 56px; align-self: flex-start; margin-top: 16px;">Найти
                                </MudButton>
                                @if (_isFiltered)
                                {
                                    <MudButton Color="Color.Secondary"
                                               Variant="Variant.Outlined"
                                               OnClick="@(ClearSearch)"
                                               Style="height: 56px; align-self: flex-start; margin-top: 16px;">Сбросить
                                    </MudButton>
                                }
                            </MudStack>
                        </Authorized>
                    </AuthorizeView>
                </MudToolBar>
                <MudDataGrid T="TransactionDto"
                             Items="_transactions"
                             Loading="@_isLoading"
                             LoadingProgressColor="Color.Primary"
                             SortMode="SortMode.Multiple"
                             Filterable="true"
                             Hideable="true"
                             Bordered="true"
                             Hover="true"
                             Dense="true">
                    <Columns>
                        <HierarchyColumn/>
                        <PropertyColumn Property="x => x.ExtractedAmount" Title="Сумма"/>
                        <TemplateColumn Title="Источник" Sortable="true" Filterable="true">
                            <CellTemplate Context="cellContext">
                                <MudChip Color="Color.Primary" Size="Size.Small">
                                    @GetSourceText(cellContext.Item.Source)
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.ReceivedAt" Title="Время"/>
                    </Columns>
                    <ChildRowContent Context="rowContext">
                        <MudStack>
                            <MudTooltip Placement="Placement.Left" Text="Id транзакции">
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2"/>
                                    <MudText Typo="Typo.body1">@rowContext.Item.Id</MudText>
                                </MudStack>
                            </MudTooltip>
                            @if (rowContext.Item.RequisiteId is not null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id реквизита">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.RequestPage" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.RequisiteId</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                            @if (rowContext.Item.PaymentId is not null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id платежа">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.CreditCard" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.PaymentId</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                            @if (!string.IsNullOrEmpty(rowContext.Item.RawMessage))
                            {
                                <MudTooltip Placement="Placement.Left" Text="Оригинальное сообщение">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.Message" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.RawMessage</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                        </MudStack>
                    </ChildRowContent>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<TransactionDto> _transactions = [];
    private bool _isShowAll;
    private Timer _refreshTimer = null!;
    private const int refreshInterval = 3000;
    private string _searchUserId = string.Empty;
    private string _searchError = string.Empty;
    private bool _isFiltered;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isShowAll = authState.User.IsInRole("Admin") || authState.User.IsInRole("Support");

        await LoadTransactions();

        Logger.LogInformation("Подписка на события транзакций");
        NotificationService.SubscribeToTransactionUpdates(HandleTransactionUpdate);

        Logger.LogInformation("Подписки на обновления транзакций настроены");

        _refreshTimer = new Timer(TimerTick, null, refreshInterval, refreshInterval);
    }

    private async void TimerTick(object? state)
    {
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            // ignore
        }
    }

    private async void HandleTransactionUpdate(TransactionDto updatedTransaction)
    {
        try
        {
            Logger.LogInformation("Получено обновление транзакции: {TransactionId}, Сумма: {Amount}",
                updatedTransaction.Id, updatedTransaction.ExtractedAmount);

            var existingTransaction = _transactions.FirstOrDefault(t => t.Id == updatedTransaction.Id);
            if (existingTransaction is not null)
            {
                var index = _transactions.IndexOf(existingTransaction);
                _transactions[index] = updatedTransaction;
                Logger.LogInformation("Обновлена существующая транзакция: {TransactionId}", updatedTransaction.Id);
            }
            else
            {
                _transactions.Insert(0, updatedTransaction);
                Logger.LogInformation("Добавлена новая транзакция: {TransactionId}", updatedTransaction.Id);
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при обновлении транзакции {TransactionId}", updatedTransaction.Id);
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            NotificationService.UnsubscribeFromTransactionUpdates();
            await _refreshTimer.DisposeAsync();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при отписке от событий");
        }
    }

    private async Task LoadTransactions()
    {
        try
        {
            _isLoading = true;
            _transactions = _isShowAll
                ? await TransactionService.GetTransactions()
                : await TransactionService.GetUserTransactions();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке транзакций", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private static string GetSourceText(TransactionSource source) => source switch
    {
        TransactionSource.Sms => "СМС",
        TransactionSource.Push => "Push",
        _ => "Неизвестно"
    };

    private async Task SearchTransactionsByUserId()
    {
        _searchError = string.Empty;

        if (string.IsNullOrWhiteSpace(_searchUserId))
        {
            await LoadTransactions();
            _isFiltered = false;
            return;
        }

        if (!Guid.TryParse(_searchUserId, out var userId))
        {
            _searchError = "Некорректный формат ID пользователя";
            return;
        }

        try
        {
            _isLoading = true;
            _transactions = await TransactionService.GetTransactionsByUserId(userId);
            _isFiltered = true;

            if (_transactions.Count == 0)
            {
                Snackbar.Add("Транзакции по указанному ID пользователя не найдены", Severity.Info);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при поиске транзакций по ID пользователя {UserId}", userId);
            Snackbar.Add("Ошибка при поиске транзакций", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        _searchUserId = string.Empty;
        _searchError = string.Empty;
        _isFiltered = false;
        await LoadTransactions();
    }
}