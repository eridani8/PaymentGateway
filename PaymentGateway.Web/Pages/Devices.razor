@page "/devices"
@using PaymentGateway.Shared.DTOs.Device
@attribute [Authorize(Roles = "User,Admin,Support")]
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ILogger<Devices> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject IDeviceService DeviceService
@implements IDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список устройств</MudText>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.QrCode"
                               OnClick="@OpenDeviceQrDialog">
                        Авторизация устройства
                    </MudButton>
                    <MudSpacer/>
                    <AuthorizeView Roles="Admin, Support">
                        <Authorized Context="adminContext">
                            <MudStack Row="true" Spacing="1">
                                <MudTextField @bind-Value="_searchUserId" Label="ID пользователя"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@Icons.Material.Filled.Search"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Normal"
                                              Placeholder="Фильтр по пользователю"
                                              Error="@(!string.IsNullOrEmpty(_searchError))"
                                              ErrorText="@_searchError"
                                              Style="width: 600px"/>
                                <MudButton Color="Color.Primary"
                                           Variant="Variant.Outlined"
                                           OnClick="@(SearchDevicesByUserId)"
                                           Style="height: 56px; align-self: flex-start; margin-top: 16px;">Найти
                                </MudButton>
                                @if (_isFiltered)
                                {
                                    <MudButton Color="Color.Secondary"
                                               Variant="Variant.Outlined"
                                               OnClick="@(ClearSearch)"
                                               Style="height: 56px; align-self: flex-start; margin-top: 16px;">Сбросить
                                    </MudButton>
                                }
                            </MudStack>
                        </Authorized>
                    </AuthorizeView>
                </MudToolBar>
                <MudDataGrid T="DeviceDto"
                             Items="_devices"
                             Loading="@_isLoading"
                             LoadingProgressColor="Color.Primary"
                             SortMode="SortMode.Multiple"
                             Filterable="true"
                             Hideable="true"
                             Bordered="true"
                             Hover="true"
                             Dense="true">
                    <Columns>
                        <HierarchyColumn/>
                        <TemplateColumn Title="Владелец" Hidden="!_isShowAll" Sortable="true" Filterable="true">
                            <CellTemplate Context="cellContext">
                                @if (!string.IsNullOrEmpty(cellContext.Item.User?.Username))
                                {
                                    <MudChip Size="Size.Small" Icon="@Icons.Material.Filled.Person"
                                             Color="Color.Primary"
                                             Text="@cellContext.Item.User.Username"/>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.DeviceName" Title="Устройство"/>
                        <TemplateColumn Title="Состояние подключения" Sortable="true" Filterable="true">
                            <CellTemplate Context="cellContext">
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <div style="width: 12px; height: 12px; border-radius: 50%; background-color: @(cellContext.Item.State ? "#4caf50" : "#f44336");"></div>
                                </div>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <ChildRowContent Context="rowContext">
                        <MudStack>
                            @if (rowContext.Item.RequisiteId != null)
                            {
                                <MudTooltip Placement="Placement.Left" Text="Id реквизита">
                                    <MudStack Row="true">
                                        <MudIcon Icon="@Icons.Material.Filled.RequestPage" Class="mr-2"/>
                                        <MudText Typo="Typo.body1">@rowContext.Item.RequisiteId</MudText>
                                    </MudStack>
                                </MudTooltip>
                            }
                            <MudTooltip Placement="Placement.Left" Text="Id устройства">
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.Smartphone" Class="mr-2"/>
                                    <MudText Typo="Typo.body1">@rowContext.Item.Id</MudText>
                                </MudStack>
                            </MudTooltip>
                            <MudTooltip Placement="Placement.Left" Text="Id пользователя">
                                <MudStack Row="true">
                                    <MudIcon Icon="@Icons.Material.Filled.AssignmentInd" Class="mr-2"/>
                                    <MudText Typo="Typo.body1">@rowContext.Item.User?.Id</MudText>
                                </MudStack>
                            </MudTooltip>
                        </MudStack>
                    </ChildRowContent>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<DeviceDto> _devices = [];
    private bool _isShowAll;
    private string _searchUserId = string.Empty;
    private string _searchError = string.Empty;
    private bool _isFiltered;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isShowAll = authState.User.IsInRole("Admin") || authState.User.IsInRole("Support");

        await LoadDevices();

        NotificationService.SubscribeToDeviceConnected(HandleDeviceConnected);
        NotificationService.SubscribeToDeviceDisconnected(HandleDeviceDisconnected);
    }

    private async void HandleDeviceConnected(DeviceDto deviceDto)
    {
        try
        {
            var existDevice = _devices.FirstOrDefault(d => d.Id == deviceDto.Id);
            if (existDevice is not null)
            {
                var index = _devices.IndexOf(existDevice);
                _devices[index] = deviceDto;
            }
            else
            {
                _devices.Insert(0, deviceDto);
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при добавлении устройства");
        }
    }

    private async void HandleDeviceDisconnected(DeviceDto deviceDto)
    {
        try
        {
            var device = _devices.FirstOrDefault(d => d.Id == deviceDto.Id);
            if (device is null) return;

            var index = _devices.IndexOf(device);
            _devices[index] = deviceDto;

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при удалении устройства");
        }
    }

    public void Dispose()
    {
        NotificationService.UnsubscribeFromDeviceConnected();
        NotificationService.UnsubscribeFromDeviceDisconnected();
    }

    private async Task LoadDevices()
    {
        try
        {
            _isLoading = true;
            _devices = _isShowAll
                ? await DeviceService.GetDevices()
                : await DeviceService.GetUserDevices();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке устройств", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenDeviceQrDialog()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            Snackbar.Add("Необходима авторизация", Severity.Error);
            return;
        }

        try
        {
            var response = await DeviceService.GenerateDeviceToken();

            if (response is null)
            {
                Snackbar.Add("Не удалось сгенерировать токен устройства", Severity.Error);
                return;
            }

            var parameters = new DialogParameters
            {
                { "QrCodeImage", $"data:image/png;base64,{response.QrCodeUri}" },
                { "Token", response.Token }
            };

            await DialogService.ShowAsync<DeviceQrDialog>(null, parameters);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при генерации токена устройства");
            Snackbar.Add("Произошла ошибка при генерации токена устройства", Severity.Error);
        }
    }

    private async Task SearchDevicesByUserId()
    {
        _searchError = string.Empty;

        if (string.IsNullOrWhiteSpace(_searchUserId))
        {
            await LoadDevices();
            _isFiltered = false;
            return;
        }

        if (!Guid.TryParse(_searchUserId, out var userId))
        {
            _searchError = "Некорректный формат ID пользователя";
            return;
        }

        try
        {
            _isLoading = true;
            _devices = await DeviceService.GetDevicesByUserId(userId);
            _isFiltered = true;

            if (_devices.Count == 0)
            {
                Snackbar.Add("Реквизиты по указанному ID пользователя не найдены", Severity.Info);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при поиске реквизитов по ID пользователя {UserId}", userId);
            Snackbar.Add("Ошибка при поиске реквизитов", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task ClearSearch()
    {
        _searchUserId = string.Empty;
        _searchError = string.Empty;
        _isFiltered = false;
        await LoadDevices();
    }
}