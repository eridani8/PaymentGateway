@page "/devices"
@using PaymentGateway.Shared.DTOs.Device
@attribute [Authorize(Roles = "User,Admin,Support")]
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ILogger<Devices> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject IDeviceService DeviceService
@implements IDisposable

<AuthorizeView Roles="User,Admin,Support">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="12" Style="height: 100%; display: flex; flex-direction: column;">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Список устройств</MudText>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.QrCode"
                               OnClick="@OpenDeviceQrDialog">
                        Авторизация устройства
                    </MudButton>
                </MudToolBar>
                <MudDataGrid T="DeviceDto"
                             Items="_devices"
                             Loading="@_isLoading"
                             LoadingProgressColor="Color.Primary"
                             SortMode="SortMode.Multiple"
                             Filterable="true"
                             Hideable="true"
                             Bordered="true"
                             Hover="true"
                             Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" />
                        <PropertyColumn Property="x => x.UserId" />
                        <PropertyColumn Property="x => x.DeviceData" />
                    </Columns>
                </MudDataGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isLoading = true;
    private List<DeviceDto> _devices = [];
    private bool _isShowAll;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isShowAll = authState.User.IsInRole("Admin") || authState.User.IsInRole("Support");
        
        await LoadDevices();
        
        NotificationService.SubscribeToDeviceConnected(HandleDeviceConnected);
        NotificationService.SubscribeToDeviceDisconnected(HandleDeviceDisconnected);
    }

    private async void HandleDeviceConnected(DeviceDto deviceDto)
    {
        try
        {
            _devices.Insert(0, deviceDto);
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при добавлении устройства");
        }
    }
    
    private async void HandleDeviceDisconnected(DeviceDto deviceDto)
    {
        try
        {
            var device = _devices.FirstOrDefault(d => d.Id == deviceDto.Id);
            if (device is null) return;

            _devices.Remove(device);

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при удалении устройства");
        }
    }
    
    public void Dispose()
    {
        NotificationService.UnsubscribeFromDeviceConnected();
        NotificationService.UnsubscribeFromDeviceDisconnected();
    }
    
    private async Task LoadDevices()
    {
        try
        {
            _isLoading = true;
            _devices = _isShowAll
                ? await DeviceService.GetAllOnlineDevices()
                : await DeviceService.GetUserOnlineDevices();
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add("Ошибка при загрузке устройств", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task OpenDeviceQrDialog()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated != true)
        {
            Snackbar.Add("Необходима авторизация", Severity.Error);
            return;
        }

        try
        {
            var response = await DeviceService.GenerateDeviceToken();

            if (response is null)
            {
                Snackbar.Add("Не удалось сгенерировать токен устройства", Severity.Error);
                return;
            }

            var parameters = new DialogParameters
            {
                { "QrCodeImage", $"data:image/png;base64,{response.QrCodeUri}" },
                { "Token", response.Token }
            };

            await DialogService.ShowAsync<DeviceQrDialog>(null, parameters);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при генерации токена устройства");
            Snackbar.Add("Произошла ошибка при генерации токена устройства", Severity.Error);
        }
    }
}